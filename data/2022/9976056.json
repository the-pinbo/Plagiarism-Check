{
    "abstract": "In this paper, we present a novel approach to teach text processing for primary and secondary school students using a block-based programming language such as Scratch. Our main idea is to have students (1) build \u201cbasic building blocks\u201d for text processing and then (2) to use them to create our example text processing applications. Here, we slightly modified Scratch to make it easy for students to ...",
    "articleNumber": "9976056",
    "articleTitle": "Text Processing Education Using a Block-Based Programming Language",
    "authors": [
        {
            "preferredName": "Youngki Park",
            "normalizedName": "Y. Park",
            "firstName": "Youngki",
            "lastName": "Park",
            "searchablePreferredName": "Youngki Park"
        },
        {
            "preferredName": "Youhyun Shin",
            "normalizedName": "Y. Shin",
            "firstName": "Youhyun",
            "lastName": "Shin",
            "searchablePreferredName": "Youhyun Shin"
        }
    ],
    "doi": "10.1109/ACCESS.2022.3227765",
    "publicationTitle": "IEEE Access",
    "publicationYear": "2022",
    "publicationVolume": null,
    "publicationIssue": null,
    "volume": "10",
    "issue": null,
    "documentLink": "/document/9976056/",
    "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response><accessType>CCBY - IEEE is not the copyright holder of this material. Please follow the instructions via https://creativecommons.org/licenses/by/4.0/ to obtain full-text articles and stipulations in the API documentation.</accessType><div id=\"BodyWrapper\" class=\"ArticlePage\" xmlns:ieee=\"http://www.ieeexplore.ieee.org\"><div id=\"article\">\n<div class=\"section\" id=\"sec1\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION I.</div><h2>Introduction</h2></div><p>Block-based programming languages are widely used for educational purposes not only in primary and secondary schools, but also in colleges/universities. These programming languages are mainly used for fostering students\u2019 computational thinking <a ref-type=\"bibr\" anchor=\"ref1\" id=\"context_ref_1_1\">[1]</a>, <a ref-type=\"bibr\" anchor=\"ref2\" id=\"context_ref_2_1\">[2]</a>, <a ref-type=\"bibr\" anchor=\"ref3\" id=\"context_ref_3_1\">[3]</a>, <a ref-type=\"bibr\" anchor=\"ref4\" id=\"context_ref_4_1\">[4]</a>, <a ref-type=\"bibr\" anchor=\"ref5\" id=\"context_ref_5_1\">[5]</a> skills. Scratch <a ref-type=\"bibr\" anchor=\"ref6\" id=\"context_ref_6_1\">[6]</a> is one of the most popular block-based programming languages. As of September of 2022, there were more than 94 million Scratch users, with more than 110 million Scratch projects shared among them <a ref-type=\"bibr\" anchor=\"ref7\" id=\"context_ref_7_1\">[7]</a>. <a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a> shows an example of Scratch programming, where the program runs when the flag is clicked. When the program starts, the puppy character advances ten steps forward and says \u201cHello!\u201d. In order to create this program, a user only needs to use the mouse to specify the background and the character, subsequently using the drag-and-drop method to insert three blocks of code. Because the Scratch programming environment is implemented in JavaScript, Scratch programs are internally executed as JavaScript codes in a web browser.\n<div class=\"figure figure-full\" id=\"fig1\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin1-3227765-large.gif\" data-fig-id=\"fig1\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin1-3227765-small.gif\" alt=\"FIGURE 1. - Example of a Scratch program where a dog character walks on a boardwalk and greets people.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 1. </b><fig><p>Example of a Scratch program where a dog character walks on a boardwalk and greets people.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div>\n<div class=\"figure figure-full\" id=\"fig2\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin2ab-3227765-large.gif\" data-fig-id=\"fig2\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin2ab-3227765-small.gif\" alt=\"FIGURE 2. - Illustrative example of our approach. The figure on the left shows a word cloud for the abstract of the paper [9] created using the Python programming language and the WordCloud library [10]. The figure on the right shows a word cloud created using the Scratch programming language and our approach based on the same text data used in the figure on the left.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 2. </b><fig><p>Illustrative example of our approach. The figure on the left shows a word cloud for the abstract of the paper <a ref-type=\"bibr\" anchor=\"ref9\" id=\"context_ref_9_1\">[9]</a> created using the Python programming language and the WordCloud library <a ref-type=\"bibr\" anchor=\"ref10\" id=\"context_ref_10_1\">[10]</a>. The figure on the right shows a word cloud created using the Scratch programming language and our approach based on the same text data used in the figure on the left.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>One limitation of Scratch is that it has only a few text processing blocks, which makes it very difficult for students to create natural language processing applications when using it. The Scratch programming environment does not have blocks to access files or blocks to collect text data from the web. Also, users inevitably encounter an inconvenience in that the number of blocks supporting text processing tasks, such as the parsing of data, is very small. This limitation is highly unfortunate from the standpoint of primary/secondary school (K-12) computer science education, as much of the software we use in our daily lives undertakes text processing. Hence, young students rarely experience such concepts through Scratch programming.</p><p><a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a> shows an example of this limitation. When using Python, students can easily collect data using the Beautiful Soup package and simply preprocess the collected data using the RegEx module. Visualizing the preprocessed data is also very easy using the WordCloud and Matplotlib libraries. On the other hand, when using Scratch, students must manually collect data on their own. Given the relatively few blocks, preprocessing the collected data is also very complicated. Although it is not difficult to visualize the preprocessed data, additional blocks are needed to assist students in their manual work.</p><p>In this paper, we present a novel approach to teach text processing for K-12 students using Scratch. Our main idea is to have students (1) build \u201cbasic building blocks\u201d for text processing, and then (2) use them to create our example text processing applications. Here, if there are blocks that students cannot build, we provide those blocks by default. In addition, we prepare as many example text processing applications as possible for students to make, so that they can experience all of the \u201cData and Analysis\u201d subconcepts presented in ACM/CSTA K-12 Computer Science Standards <a ref-type=\"bibr\" anchor=\"ref11\" id=\"context_ref_11_1\">[11]</a>.</p><p>The main contributions of this paper are as follows:\n<ul style=\"list-style-type:disc\"><li><p>We summarized existing natural language processing (or text processing) educational materials for K-12 students using text/block-based programming languages (<a ref-type=\"sec\" anchor=\"sec2a\" class=\"fulltext-link\">Section II.A</a>). In order to emphasize the importance of young students studying text processing, we introduce the Data and Analysis subconcepts of the ACM/CSTA K-12 Computer Science Standards (<a ref-type=\"sec\" anchor=\"sec2b\" class=\"fulltext-link\">Section II.B</a>).</p></li><li><p>We present our basic building blocks for text processing (<a ref-type=\"sec\" anchor=\"sec3a\" class=\"fulltext-link\">Sections III.A</a> to <a ref-type=\"sec\" anchor=\"sec3b\" class=\"fulltext-link\"/><a ref-type=\"sec\" anchor=\"sec3c\" class=\"fulltext-link\"/><a ref-type=\"sec\" anchor=\"sec3d\" class=\"fulltext-link\"/><a ref-type=\"sec\" anchor=\"sec3e\" class=\"fulltext-link\">III.E</a>). These blocks are closely related to the Data and Analysis subconcepts, and are exploited when students create text processing applications.</p></li><li><p>We present example Scratch applications based on text processing that young students can implement on their own (<a ref-type=\"sec\" anchor=\"sec4a\" class=\"fulltext-link\">Section IV.A</a>). We also summarize how these applications are related to the Data and Analysis subconcepts (<a ref-type=\"sec\" anchor=\"sec4b\" class=\"fulltext-link\">Section IV.B</a>).</p></li><li><p>We conducted two classes using our approach for K-12 teachers. We also conducted an in-depth analysis of the survey results, including a comparison with other survey results in similar groups (<a ref-type=\"sec\" anchor=\"sec5a\" class=\"fulltext-link\">Sections V.A</a> to <a ref-type=\"sec\" anchor=\"sec5b\" class=\"fulltext-link\"/><a ref-type=\"sec\" anchor=\"sec5c\" class=\"fulltext-link\">V.C</a>).</p></li></ul></p><p>The main research questions of this paper are as follows:\n<ol><li><p>Can K-12 students easily implement interesting and practical text processing applications using a block-based programming language?</p></li><li><p>Can K-12 students improve their programming and text processing abilities by implementing our example applications?</p></li></ol></p></div>\n<div class=\"section\" id=\"sec2\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION II.</div><h2>Related Work</h2></div><div class=\"section_2\" id=\"sec2a\"><h3>A. Text Processing Education</h3><p>Text processing education based on a text-based programming language (such as Python or JavaScript) is often conducted in higher education. One popular educational resource is the book \u201cSpeech and Language Processing\u201d by Jurafsky and Martin <a ref-type=\"bibr\" anchor=\"ref12\" id=\"context_ref_12_2a\">[12]</a>. In this book, the authors introduce the latest natural language processing technologies such as sentiment classification, neural machine translation, chatbots and dialogue systems. In addition, text processing techniques (such as regular expressions, text normalization, and edit distance) that can be used in primary or secondary school are also introduced. Similarly, Li et al. <a ref-type=\"bibr\" anchor=\"ref13\" id=\"context_ref_13_2a\">[13]</a> proposed a big data text summarization course for undergraduate and graduate students. In this course, the authors let their students write their own program codes that perform text summarization. By implementing their own programs, the students practiced typical techniques of natural language processing, such as tokenization, part-of-speech tagging, named entity recognition, classification, clustering, extractive summarization, and abstractive summarization. In some cases, text processing education using a text-based programming language is also provided to K-12 students. Norouzi et al. <a ref-type=\"bibr\" anchor=\"ref14\" id=\"context_ref_14_2a\">[14]</a> introduced a machine learning and natural language processing summer school for high school students hosted by the University of California, Santa Cruz. Through this summer school, the high school students studied various topics, such as file access, preprocessing, language models, neural networks, and ethics in AI, using Python and Google Colab for a month.</p><p>On the other hand, text processing education using a block-based programming language is mainly aimed at primary and secondary school students (K-12 students). Compared to the existing text processing educational materials using a text-based programming language, those using a block-based programming language include relatively simple text processing. For example, \u201cMachine Learning for Kids\u201d <a ref-type=\"bibr\" anchor=\"ref15\" id=\"context_ref_15_2a\">[15]</a> and \u201cCognimates\u201d <a ref-type=\"bibr\" anchor=\"ref16\" id=\"context_ref_16_2a\">[16]</a>, variants of Scratch, provide a Twitter block, which can be used to train positive and negative tweets. As another example, the \u201cEntry\u201d <a ref-type=\"bibr\" anchor=\"ref17\" id=\"context_ref_17_2a\">[17]</a> programming website also provides educational materials for text processing. These materials introduce example applications that can be implemented through simple text processing, such as \u201clistening and dictating machine voice using TTS blocks\u201d or \u201ctranslating chat conversations using translation blocks\u201d.</p><p>In summary, existing educational materials for text processing have the following characteristics: (1) Those using a text-based programming language mainly aim at higher education. (2) Although those using a block-based programming language aim at K-12 education, they contain only a basic level of text processing. In this paper, we present a novel approach to teach advanced text processing techniques using a block-based programming language.</p></div><div class=\"section_2\" id=\"sec2b\"><h3>B. ACM/CSTA K-12 Computer Science Standards</h3><p>The ACM CSTA K-12 Computer Science Standards <a ref-type=\"bibr\" anchor=\"ref11\" id=\"context_ref_11_2b\">[11]</a> consists of the following five concepts: \u201cAlgorithms &amp; Programming,\u201d \u201cComputing Systems,\u201d \u201cData &amp; Analysis,\u201d \u201cImpacts of Computing,\u201d \u201cNetworks &amp; the Internet.\u201d Clearly, among them, the most closely related to text processing is the Data &amp; Analysis concept, which includes three subconcepts (\u201cStorage,\u201d \u201cCollection, Visualization &amp; Transformation,\u201d and \u201cInference &amp; Models\u201d) and a total of 15 Computer Science Standards.</p><p>To gain a better understanding of the data and analysis subconcepts, we divide the second subconcept into three further concepts: \u201cCollection,\u201d \u201cTransformation,\u201d and \u201cVisualization.\u201d That is, we redefine the data and analysis concept to include five subconcepts, as follows:\n<ul style=\"list-style-type:disc\"><li><p>Storage: Access data using local/cloud computing devices (1A-DA-05, 3A-DA-10), and store data in various representations (2-DA-07 and 3A-DA-09).</p></li><li><p>Collection: Collect sufficient and accurate data in an appropriate manner (1B-DA-07, 1A-DA-06, and 3B-DA-06).</p></li><li><p>Transformation: Find patterns in data (1A-DA-07 and 3B-DA-05) and organize raw data (1B-DA-06 and 2-DA-08).</p></li><li><p>Visualization: Visualize data interactively in various forms (1A-DA-06 and 3A-DA-11).</p></li><li><p>Inference &amp; Models: Create, refine, and evaluate models (3A-DA-12, 2-DA-09, 3B-DA-07).</p></li></ul></p><p>It is difficult to prove that the existing block-based text processing educational materials achieve all of the achievement standards corresponding to the five subconcepts above. In particular, these educational materials do not require a great depth of knowledge related to \u201cStorage,\u201d \u201cCollection,\u201d and \u201cTransformation.\u201d In this paper, we aim to create block-based text processing educational materials with which students can understand all five subconcepts.</p></div></div>\n<div class=\"section\" id=\"sec3\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION III.</div><h2>Basic Building Blocks for Text Processing</h2></div><p>In this section, we present five types of \u201cbasic building blocks\u201d for text processing. Each block type corresponds to each Data and Analysis subconcept of the ACM/CSTA K-12 Computer Science Standards. Note that we will present various types of text processing example applications using these basic building blocks in <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>.</p><p>In order to build the basic building blocks for text processing, we reused the \u201cTooee\u201d block interface proposed in our previous research <a ref-type=\"bibr\" anchor=\"ref9\" id=\"context_ref_9_3\">[9]</a>, <a ref-type=\"bibr\" anchor=\"ref18\" id=\"context_ref_18_3\">[18]</a>. Basically, Tooee has a getter block and a setter block as shown below. When one of the Tooee blocks is executed, the arguments (strings inserted in the parentheses) are transmitted to the Tooee web server. The web server processes the request and stores the result in the \u201canswer from Tooee\u201d block.\n<ul style=\"list-style-type:disc\"><li><p>Tooee, what is ()</p></li><li><p>Tooee, () is ()</p></li></ul></p><p>For example, one of our studies <a ref-type=\"bibr\" anchor=\"ref9\" id=\"context_ref_9_3\">[9]</a> presents an example code in which the \u201canswer from Tooee\u201d block contains the string \u201csunny\u201d when the \u201cwhat is the (weather)\u201d block is executed. The other study <a ref-type=\"bibr\" anchor=\"ref18\" id=\"context_ref_18_3\">[18]</a> presents an example of opening the corresponding website in the Chrome web browser when the \u201cTooee, (URL to open) is (<a target=\"_blank\" href=\"https://dblp.org\">https://dblp.org</a>)\u201d block is executed.</p><p>In this paper, we extend the Tooee web server so that it can perform more diverse tasks. When an argument including a specific reserved word is transmitted, a specific command is executed. For example, if an argument with the reserved word \u201c#list\u201d is sent to the web server, the web server stores the names of all files in the Data directory in the \u201canswer from Tooee\u201d block. As another example, if the argument ends with \u201c.png,\u201d the web server recognizes the argument as an image file and reads the image file from the Data directory.</p><p>In the following subsections, we introduce basic building blocks based on our extended Tooee blocks. Note again that in <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>, we introduce example applications that can be implemented using these basic building blocks.</p><div class=\"section_2\" id=\"sec3a\"><h3>A. Storage Blocks</h3><p>Accessing data in local computer/cloud storage is one of the most important parts of the Storage subconcept. However, while existing block-based programming languages provide limited cloud storage to registered (or authorized) users, they do not provide blocks to access data on a local computer. In order to cope with this problem, we added reserved words shown in <a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">Table 1</a> to Tooee so that users can freely access their data files. Note that data files on both local and remote computers can be accessed. If Tooee\u2019s address is set to the local computer using the block below, users can access files on the local computer. On the other hand, if the Tooee\u2019s address is set to a remote computer, files on the remote computer can be accessed.\n<ul style=\"list-style-type:disc\"><li><p>Set Tooee\u2019s address to ()</p></li></ul><div class=\"figure figure-full table\" id=\"table1\"><div class=\"figcaption\"><b class=\"title\">TABLE 1 </b>\nAdditional Features of Tooee for the Storage Subconcept. Using the Given Reserved Words, We Can Make Tooee Access Files on Our Local or Remote Computer</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t1-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t1-3227765-small.gif\" alt=\"Table 1- &#10;Additional Features of Tooee for the Storage Subconcept. Using the Given Reserved Words, We Can Make Tooee Access Files on Our Local or Remote Computer\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p><a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">Table 1</a> summarizes Tooee\u2019s reserved words for file access. If the first argument of the getter or setter block has a reserved word, the webserver processes the specified file access command and returns the result through the \u201canswer from Tooee\u201d block. Because unexpected problems can arise when users have access to all files on a computer, we restrict them by allowing them to access only one directory (the \u201cData\u201d directory) and its subdirectories.</p><p><a ref-type=\"fig\" anchor=\"fig3\" class=\"fulltext-link\">Figure 3</a> shows an example of using the reserved words shown in <a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">Table 1</a>. Here, the \u201cmy file,\u201d \u201ctext to write,\u201d and \u201cmy file content\u201d variables have the values \u201c#file,\u201d \u201c#write,\u201d and \u201c#read,\u201d respectively. When the program runs (when the green flag is clicked), the file to access is set to \u201cname.txt.\u201d When the user presses the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${w}$\n</tex-math></inline-formula> key, the name entered by the user is saved in <i>name.txt</i>. When the user presses the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${r}$\n</tex-math></inline-formula> key, the value stored in <i>name.txt</i> is displayed on the screen.\n<div class=\"figure figure-full\" id=\"fig3\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin3-3227765-large.gif\" data-fig-id=\"fig3\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin3-3227765-small.gif\" alt=\"FIGURE 3. - An example Scratch program that accesses the file \u201cname.txt\u201d on a local computer (by default). In this program, when the green flag is clicked, the file to be accessed is set to \u201cname.txt.\u201d When the &#10;${w}$&#10; key is pressed, the text entered by the user is appended to the file. When the &#10;${r}$&#10; key is pressed, the entire contents of the file are displayed on the screen. Here, the variables \u201cmy file,\u201d \u201ctext to write,\u201d and \u201cmy file content\u201d have reserved words \u201c#file,\u201d \u201c#write,\u201d and \u201c#read,\u201d respectively.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 3. </b><fig><p>An example Scratch program that accesses the file \u201cname.txt\u201d on a local computer (by default). In this program, when the <i>green flag</i> is clicked, the file to be accessed is set to \u201cname.txt.\u201d When the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${w}$\n</tex-math></inline-formula> key is pressed, the text entered by the user is appended to the file. When the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${r}$\n</tex-math></inline-formula> key is pressed, the entire contents of the file are displayed on the screen. Here, the variables \u201cmy file,\u201d \u201ctext to write,\u201d and \u201cmy file content\u201d have reserved words \u201c#file,\u201d \u201c#write,\u201d and \u201c#read,\u201d respectively.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec3b\"><h3>B. Collection Blocks</h3><p>Collecting data represent a highly important aspect of the Collection subconcept. However, many students using block-based programming languages had to use either previously collected data or had to collect their own data manually. Using the reserved words shown in <a ref-type=\"table\" anchor=\"table2\" class=\"fulltext-link\">Table 2</a>, students can automate the data collection process. These reserved words are borrowed from our previous study <a ref-type=\"bibr\" anchor=\"ref18\" id=\"context_ref_18_3b\">[18]</a>. Three of the most frequently used reserved words are \u201c#open,\u201d \u201c#click,\u201d and \u201c#scrape.\u201d Thus, in the experiment described in <a ref-type=\"sec\" anchor=\"sec5\" class=\"fulltext-link\">Section V</a>, first we educated students to become familiar with these three reserved words and then we proceed with training on other reserved words.<div class=\"figure figure-full table\" id=\"table2\"><div class=\"figcaption\"><b class=\"title\">TABLE 2 </b>\nAdditional Features of Tooee for Collection Subconcepts</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t2-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t2-3227765-small.gif\" alt=\"Table 2- &#10;Additional Features of Tooee for Collection Subconcepts\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p><a ref-type=\"fig\" anchor=\"fig4\" class=\"fulltext-link\">Figure 4</a> shows an example code that uses these three reserved words to fetch the latest tweet with the \u201c#programming\u201d tag on Twitter. Here, the \u201cURL to open,\u201d \u201cURL to click,\u201d and \u201cURL to scrape\u201d variables have the values \u201c#open,\u201d \u201c#click,\u201d and \u201c#scrape,\u201d respectively. Although we used \u201c#click\u201d in this example, there are also many websites where data can be collected using only \u201c#open\u201d and \u201c#scrape.\u201d\n<div class=\"figure figure-full\" id=\"fig4\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin4-3227765-large.gif\" data-fig-id=\"fig4\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin4-3227765-small.gif\" alt=\"FIGURE 4. - An example Scratch program code to scrape the most recent tweet tagged with #programming from Twitter. When the user presses the &#10;${c}$&#10; key, the program loads a webpage that retrieves the tag with #programming from Twitter, clicks the menu to obtain the latest tweets using XPath, and uses the CSS selector to retrieve the most recent tweets. Here, the variables \u201cURL to open,\u201d \u201cURL to click,\u201d and \u201cURL to scrape\u201d have the reserved words \u201c#open,\u201d \u201c#click,\u201d and \u201c#scrape,\u201d respectively.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 4. </b><fig><p>An example Scratch program code to scrape the most recent tweet tagged with #programming from Twitter. When the user presses the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${c}$\n</tex-math></inline-formula> key, the program loads a webpage that retrieves the tag with #programming from Twitter, clicks the menu to obtain the latest tweets using XPath, and uses the CSS selector to retrieve the most recent tweets. Here, the variables \u201cURL to open,\u201d \u201cURL to click,\u201d and \u201cURL to scrape\u201d have the reserved words \u201c#open,\u201d \u201c#click,\u201d and \u201c#scrape,\u201d respectively.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec3c\"><h3>C. Transformation Blocks</h3><p>Transforming the data into an appropriate form is very important for students to create practical programs. In particular, because data collected from the web is often raw data, students need a way easily to process these types of data. Unfortunately, existing block-based programming languages rarely provide these types of blocks. Therefore, students or teachers must implement various types of text processing blocks themselves.</p><p>In this subsection, we propose 18 practical string processing blocks that Scratch users can implement themselves. <a ref-type=\"table\" anchor=\"table3\" class=\"fulltext-link\">Table 3</a> shows the interfaces of these blocks. Here, the strings in parentheses are arguments.<div class=\"figure figure-full table\" id=\"table3\"><div class=\"figcaption\"><b class=\"title\">TABLE 3 </b>\nText Processing Functions Implemented Using Scratch\u2019s \u201cMy Blocks.\u201d Because Block-Based Programming Languages Do Not Provide These Types of Blocks, Students or Teachers Need to Implement These Blocks Themselves</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t3-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t3-3227765-small.gif\" alt=\"Table 3- &#10;Text Processing Functions Implemented Using Scratch\u2019s \u201cMy Blocks.\u201d Because Block-Based Programming Languages Do Not Provide These Types of Blocks, Students or Teachers Need to Implement These Blocks Themselves\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p><a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">Figure 5</a> shows a sample Scratch code that implements the \u201cSplit (string) using (multiple delimiters)\u201d block shown as the first item in <a ref-type=\"table\" anchor=\"table3\" class=\"fulltext-link\">Table 3</a>. The behavior of this Scratch code implementation is nearly identical to that of the Python code below. For example, in the Python code below, when \u201cHello, I am Tooee. Nice to meet you!\u201d and \u201c,.\u201d are received as arguments, the list [\u201cHello\u201d, \u201c I am Tooee\u201d, \u201c Nice to meet you!\u201d] is returned. Similarly, when the Scratch code in <a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">Figure 5</a> receives the same two arguments (\u201dHello, I am Tooee. Nice to meet you!\u201d and \u201c,.\u201d), the \u201ctokens\u201d list has the following three elements (\u201cHello\u201d, \u201cI am Tooee\u201d, \u201c Nice to meet you!\u201d).\n<ul style=\"list-style-type: none;\"><li><p><monospace>def split(string, delimiters):</monospace></p></li><li><p><monospace>import re</monospace></p></li><li><p><monospace>tokens = re.split(f\u2019[{delimiters}]\u2019,</monospace></p></li><li><p><monospace>string)</monospace></p></li><li><p><monospace>return tokens</monospace></p></li></ul>\n<div class=\"figure figure-full\" id=\"fig5\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin5-3227765-large.gif\" data-fig-id=\"fig5\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin5-3227765-small.gif\" alt=\"FIGURE 5. - Sample code implementing the \u201cSplit (string) using (multiple delimiters)\u201d block shown in Table 3.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 5. </b><fig><p>Sample code implementing the \u201cSplit (string) using (multiple delimiters)\u201d block shown in <a ref-type=\"table\" anchor=\"table3\" class=\"fulltext-link\">Table 3</a>.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>Obviously, implementing these string processing blocks using Scratch is not easy for young students. If students find it difficult to implement these blocks, one possible solution is for teachers to implement them for their students.</p><p>There are also string processing blocks that cannot be implemented using Scratch\u2019s \u201cMy Blocks.\u201d As an example, a string processing block that expresses Korean letters by dividing them into Korean alphabets (graphemes) cannot be implemented with Scratch. In the field of natural language processing, researchers often use strings divided into character or subword units as well as strings divided into word units. Therefore, we added the functions shown in <a ref-type=\"table\" anchor=\"table4\" class=\"fulltext-link\">Table 4</a> to the Tooee webserver to enable the processing of Korean strings in alphabetical units.<div class=\"figure figure-full table\" id=\"table4\"><div class=\"figcaption\"><b class=\"title\">TABLE 4 </b>\nReserved Word That Divides Korean Letters Into the Korean Alphabet Units (Graphemes)</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t4-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t4-3227765-small.gif\" alt=\"Table 4- &#10;Reserved Word That Divides Korean Letters Into the Korean Alphabet Units (Graphemes)\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div><div class=\"section_2\" id=\"sec3d\"><h3>D. Visualization Blocks</h3><p>Most of the blocks in Scratch are related to visualization. For example, even the blocks shown in <a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a> are visualization blocks that move the character by ten steps (<i>move 10 steps</i>) and create a speech bubble saying \u201cHello!\u201d (<i>say Hello!</i>). Scratch also provides a function to decorate character strings and display them on the screen using the \u201cCostumes\u201d menu. However, because there is no block that easily outputs the text data collected through the program code directly on the screen, we added a text-data-printing function to the Scratch programming environment, as shown in <a ref-type=\"table\" anchor=\"table5\" class=\"fulltext-link\">Table 5</a>.<div class=\"figure figure-full table\" id=\"table5\"><div class=\"figcaption\"><b class=\"title\">TABLE 5 </b>\nAdditional Reserved Words to Print Text on the Screen Easily</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t5-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t5-3227765-small.gif\" alt=\"Table 5- &#10;Additional Reserved Words to Print Text on the Screen Easily\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p><a ref-type=\"fig\" anchor=\"fig6\" class=\"fulltext-link\">Figure 6</a> shows an example code that outputs text on the screen using the reserved words shown in <a ref-type=\"table\" anchor=\"table5\" class=\"fulltext-link\">Table 5</a>. We can use the position of a specific sprite (here, a sprite with an image of a cat) to change the position of the text, and we can hide the sprite, with only the text remaining. We can set the text to be printed on the screen using the reserved word \u201c#print.\u201d If the reserved words \u201c#font,\u201d \u201c#color,\u201d and \u201c#size\u201d are not used in advance, their default values are used when printed on the screen.\n<div class=\"figure figure-full\" id=\"fig6\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin6-3227765-large.gif\" data-fig-id=\"fig6\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin6-3227765-small.gif\" alt=\"FIGURE 6. - An example Scratch code that displays \u201cHello!\u201d in blue font (size 200) using the seventh font at the position of (-141, 10). Here, the variables \u201ctext font,\u201d \u201ctext color,\u201d \u201ctext size,\u201d and \u201ctext to print\u201d have \u201c#font,\u201d \u201c#color,\u201d \u201c#size,\u201d and \u201c#print,\u201d respectively.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 6. </b><fig><p>An example Scratch code that displays \u201cHello!\u201d in blue font (size 200) using the seventh font at the position of (-141, 10). Here, the variables \u201ctext font,\u201d \u201ctext color,\u201d \u201ctext size,\u201d and \u201ctext to print\u201d have \u201c#font,\u201d \u201c#color,\u201d \u201c#size,\u201d and \u201c#print,\u201d respectively.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec3e\"><h3>E. Blocks for Inference &amp; Models</h3><p>We improved Tooee to be able to train image and text data quickly and make inferences using the trained model. <a ref-type=\"fig\" anchor=\"fig7\" class=\"fulltext-link\">Figure 7</a> shows an example program code that performs training and inference using image data. Here, we propose three methods for training image data; the first method is to use an image file on your local computer, and the second method is to use a web image file. Third, we provide a screen block so that students can train the current screen image (480 * 360 pixels). Students can use the same three methods when making inferences.\n<div class=\"figure figure-full\" id=\"fig7\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin7-3227765-large.gif\" data-fig-id=\"fig7\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin7-3227765-small.gif\" alt=\"FIGURE 7. - An example scratch code that trains and makes inferences using a local image file, a web image file, and the current screen.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 7. </b><fig><p>An example scratch code that trains and makes inferences using a local image file, a web image file, and the current screen.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>We provide training and inference blocks for text data in a similar way. <a ref-type=\"fig\" anchor=\"fig8\" class=\"fulltext-link\">Figure 8</a> shows an example Scratch code that trains text data and makes inferences using the trained model. In this example, we trained \u201csad\u201d and \u201chappy\u201d using two sentences.\n<div class=\"figure figure-full\" id=\"fig8\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin8-3227765-large.gif\" data-fig-id=\"fig8\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin8-3227765-small.gif\" alt=\"FIGURE 8. - Training and inference examples on text data. Students can train text data using setter blocks and make inferences using getter blocks.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 8. </b><fig><p>Training and inference examples on text data. Students can train text data using setter blocks and make inferences using getter blocks.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>If students want to know the probability of an inference result, they can use the reserved word \u201c#prob.\u201d If this reserved word is used immediately after inference, its probability is returned as a value between 0 and 100. If students use the reserved word \u201c#probs,\u201d they can obtain the probability values of all classes in the form of a list. <a ref-type=\"table\" anchor=\"table6\" class=\"fulltext-link\">Table 6</a> shows examples of how these reserved words are used.<div class=\"figure figure-full table\" id=\"table6\"><div class=\"figcaption\"><b class=\"title\">TABLE 6 </b>\nReserved Words to Find Out Probability Values of an Inference Result Performed Using a Trained Model, and Examples of Their Usage</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t6-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t6-3227765-small.gif\" alt=\"Table 6- &#10;Reserved Words to Find Out Probability Values of an Inference Result Performed Using a Trained Model, and Examples of Their Usage\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div></div>\n<div class=\"section\" id=\"sec4\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION IV.</div><h2>Example Text Processing Applications</h2></div><div class=\"section_2\" id=\"sec4a\"><h3>A. Example Applications</h3><p>In this subsection, we present eleven text processing example applications that can be implemented using the blocks introduced in <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>.</p><div class=\"section_2\" id=\"sec4a1\"><h4>1) Sorting Players by Their Scores in a Bat-Catching Game</h4><p>Sorting operations are rarely used in block-based programming due to implementation difficulties. However, these operations are often essential when processing text, and learning how to sort helps students create more useful programs. Here, as shown in <a ref-type=\"fig\" anchor=\"fig9\" class=\"fulltext-link\">Figure 9</a>, we present a bat-catching game. When the program starts, the bat moves randomly. If a user clicks on the bat, the bat\u2019s costume changes and the score increases by ten points. After ten seconds, the game is over, and the user enters a name. The name entered by the user and the user\u2019s score are saved in a file, and the names and scores of the three highest scorers are displayed on the screen. In order for students to create this program, they need to be able to access a file, store the contents of the file in a list after preprocessing, and sort the list of pairs.\n<div class=\"figure figure-full\" id=\"fig9\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin9-3227765-large.gif\" data-fig-id=\"fig9\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin9-3227765-small.gif\" alt=\"FIGURE 9. - Example screen of the bat-catching game.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 9. </b><fig><p>Example screen of the bat-catching game.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec4a2\"><h4>2) Collecting News Data From the Web for Model Training and Inference</h4><p>This program trains the AI to know what political news articles and social news articles are based on the titles of the collected articles. In order for students to create this program, they need to able to scrape news articles, remove substrings that are not needed for training, and train text data.</p></div><div class=\"section_2\" id=\"sec4a3\"><h4>3) Collecting News Data All at Once and Displaying Only News With Specific Keywords</h4><p>This program collects the titles of popular news articles on a particular website all at once. When a user inputs a specific keyword, news articles in which the keyword appears in the title are displayed on the screen. <a ref-type=\"fig\" anchor=\"fig10\" class=\"fulltext-link\">Figure 10</a> shows the execution result of the program when the user searches for \u201capartment.\u201d To make this program, students should be able to collect a single HTML file and extract items with desired keywords through text processing.\n<div class=\"figure figure-full\" id=\"fig10\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin10-3227765-large.gif\" data-fig-id=\"fig10\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin10-3227765-small.gif\" alt=\"FIGURE 10. - Example program that collects news titles with keywords searched by users and displays them on the screen.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 10. </b><fig><p>Example program that collects news titles with keywords searched by users and displays them on the screen.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec4a4\"><h4>4) Generating Simple Text Captions From Emojis</h4><p>This program generates a simple caption that describes a given emoji. Because a general caption generator is not typically an easy program for young students to implement, this program aims to generate very simplified captions: first, the characters appearing on each emoji are trained; given a new emoji, the program infers the two characters most likely to appear on that emoji. The caption is then created by concatenating \u201cand\u201d and \u201care playing\u201d with the names of the two characters. <a ref-type=\"fig\" anchor=\"fig11\" class=\"fulltext-link\">Figure 11</a> shows the caption generator program implemented in this way.\n<div class=\"figure figure-full\" id=\"fig11\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin11-3227765-large.gif\" data-fig-id=\"fig11\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin11-3227765-small.gif\" alt=\"FIGURE 11. - A simple caption generation application. First, we train the characters that appear on each emoji. The program then infers the two characters most likely to appear on a given new emoji. Finally, it creates a sentence by concatenating character names and the strings \u201cand\u201d and \u201care playing\u201d appropriately.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 11. </b><fig><p>A simple caption generation application. First, we train the characters that appear on each emoji. The program then infers the two characters most likely to appear on a given new emoji. Finally, it creates a sentence by concatenating character names and the strings \u201cand\u201d and \u201care playing\u201d appropriately.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec4a5\"><h4>5) Generating Easy-to-Read Korean Sports News Using Grapheme Segmentation</h4><p>This program automatically creates Korean sports news articles based on the information entered by the user. The news article is created by inserting the input information into an already created \u201cnews template,\u201d rather than generating the article using the neural network-based generative model. Depending on the word inserted, the news template may need to be slightly modified. For example, the next word can differ depending on whether a word is singular or plural. In the case of Korean, this problem is particularly difficult to deal with. Students should create an algorithm that divides each letter into alphabet units (graphemes) and determines how to modify the template article based on this.</p></div><div class=\"section_2\" id=\"sec4a6\"><h4>6) Searching for Apartments for Sale With the Lowest Price Using Web Automation</h4><p>This program collects apartment price information using a website that reports real estate prices. The website is complex and requires keyboard and mouse automation to collect data, and the collected data often include price information as well as other information. In order for students to make this program, they should be able to collect the desired text data and to process the text to extract the necessary information from the collected data.</p></div><div class=\"section_2\" id=\"sec4a7\"><h4>7) Drawing Word Clouds Based on the Popularity of Specific Game Characters</h4><p>This program draws a word cloud in a shape identical to that shown on the right in <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a>. While <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a> draws a word cloud using the frequency of words appearing in the document, in this program, the word cloud is drawn based on the frequency of game characters mentioned in an online game community. In order for students to build this program, they must first create a list with the names of the game characters. Then, they should collect posts from the online gaming community and count the number of times the character names appear on the list. Finally, the size of the word is determined according to the frequency, and each word is output to the screen so that it is located within the predetermined shape. For example, in <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a>, this shape is a circle. The names of the characters can be displayed either horizontally or vertically.</p></div><div class=\"section_2\" id=\"sec4a8\"><h4>8) Searching for Books Based on Jaccard Similarity</h4><p>As shown in <a ref-type=\"fig\" anchor=\"fig12\" class=\"fulltext-link\">Figure 12</a>, this program shows the animated cover of the book the user has searched for. Here, the Jaccard Similarity for Bags is used to search for the most similar book even if the book title entered by the user is different from the actual book title. For example, assuming that a user wants to search for a book called \u201cin our time\u201d by ernest hemingway, even if this user made a typo and searched for \u201cin ouro imte,\u201d this book can be found if the similarity value is higher than that of all other books. Note that in the case of Korean, one letter is composed of several alphabet units (graphemes). Therefore, it is helpful for Korean students to use the reserved word \u201c#hangul\u201d to calculate the Jaccard Similarity for Bags based on the Korean alphabets.\n<div class=\"figure figure-full\" id=\"fig12\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin12-3227765-large.gif\" data-fig-id=\"fig12\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin12-3227765-small.gif\" alt=\"FIGURE 12. - An example program that finds and displays the most similar book when the user enters the title of the book. In the case of Korean, grapheme segmentation can be performed using the reserved word \u201c#hangul\u201d before calculating the Jaccard Similarity for Bags.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 12. </b><fig><p>An example program that finds and displays the most similar book when the user enters the title of the book. In the case of Korean, grapheme segmentation can be performed using the reserved word \u201c#hangul\u201d before calculating the Jaccard Similarity for Bags.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec4a9\"><h4>9) Changing the Backdrop of Scratch Programs Remotely</h4><p>This program changes the backdrop of our desktop computer when the user touches their smartphone. The program is implemented as follows: (1) first, the program sets Tooee\u2019s address as the IP address of the desktop computer. (2) If the user clicks the mouse, the name of the next backdrop is saved in a specific file. (3) Otherwise, the name of the next background is read from the file, and the current background is replaced with that background.</p><p>While the program code is very simple, it can be difficult for students to run this program if they do not have a prior understanding of the web server. After implementing this program, students need to use Tooee\u2019s HTML converter to convert the program code into an HTML file and upload it to their web server. Assuming that a student accesses a published HTML file on both his smartphone and desktop computer, when the student touches the screen on the smartphone, the backdrops of the programs running on both devices will change in unison.</p></div><div class=\"section_2\" id=\"sec4a10\"><h4>10) Displaying Appropriate Emojis or Backgrounds Based on Chat Logs</h4><p>In this program, multiple people can chat, and the eight most recent chats are displayed on the screen. The main feature of this program is that when a user inputs a sentence containing a specific word, the corresponding emoji is displayed on all users\u2019 screens. <a ref-type=\"fig\" anchor=\"fig13\" class=\"fulltext-link\">Figure 13</a> shows an example of a user entering the sentence \u201cdo you want to build a snowman?\u201d Here, because this sentence contains the word \u201csnowman,\u201d a snowman emoji appeared on all users\u2019 screens.\n<div class=\"figure figure-full\" id=\"fig13\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin13-3227765-large.gif\" data-fig-id=\"fig13\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin13-3227765-small.gif\" alt=\"FIGURE 13. - A chat program that shows the eight most recent conversation sentences. If the last chat sentence contains a specific word (\u201dsnowman\u201d in this example), the corresponding animated emoji is displayed on all users\u2019 screens (the snowman emoji in this case).\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 13. </b><fig><p>A chat program that shows the eight most recent conversation sentences. If the last chat sentence contains a specific word (\u201dsnowman\u201d in this example), the corresponding animated emoji is displayed on all users\u2019 screens (the snowman emoji in this case).</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>The implementation of this program is similar to the ninth example application; when the green flag is clicked (when the program starts), Tooee\u2019s address is set to the specific computer\u2019s IP address. The user can enter a sentence after pressing the space key. The text entered by the user is saved in a file. This program reads the eight most recent statements from the file every second (i.e., using pooling) and prints the results to the screen. If the last sentence contains a specific word, the corresponding emoji appears for three seconds. If it is an animated emoji, the shape of the emoji will change every 0.2 seconds.</p></div><div class=\"section_2\" id=\"sec4a11\"><h4>11) Training a Chatbot to Answer Questions</h4><p>This program is a simple chatbot program, and the robot automatically answers questions entered by the user. To create this chatbot program, students must (1) download the Q&amp;A dataset to be used for model training from GitHub, (2) preprocess the dataset using a spreadsheet program, and (3) train a model using the preprocessed data. <a ref-type=\"fig\" anchor=\"fig14\" class=\"fulltext-link\">Figure 14</a> shows an example program screen where the program performs inference after training the model. In this example, the user presses the space key and enters \u201cIt\u2019s too hot today,\u201d and the robot replies with \u201cTake a cold shower.\u201d\n<div class=\"figure figure-full\" id=\"fig14\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin14-3227765-large.gif\" data-fig-id=\"fig14\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin14-3227765-small.gif\" alt=\"FIGURE 14. - A chatbot program trained on a Q&amp;A dataset. The robot replies with \u201cTake a cold shower.\u201d to the user\u2019s query \u201cIt\u2019s too hot today.\u201d\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 14. </b><fig><p>A chatbot program trained on a Q&amp;A dataset. The robot replies with \u201cTake a cold shower.\u201d to the user\u2019s query \u201cIt\u2019s too hot today.\u201d</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p></div></div><div class=\"section_2\" id=\"sec4b\"><h3>B. Summary</h3><p>These example programs are not only built on the basic building blocks introduced in <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a> but are also closely related to the Data &amp; Analysis subconcepts of ACM/CSTA Standards introduced in <a ref-type=\"sec\" anchor=\"sec2b\" class=\"fulltext-link\">Section II.B</a>. <a ref-type=\"table\" anchor=\"table7\" class=\"fulltext-link\">Table 7</a> summarizes how each example program corresponds to each subconcept. It is expected that students will be able to understand all five subconcepts as they implement all eleven example programs. In particular, it should be noted that most of the example programs are very closely related to the Transformation subconcept, which is quite difference from other block-based programming language educational materials.<div class=\"figure figure-full table\" id=\"table7\"><div class=\"figcaption\"><b class=\"title\">TABLE 7 </b>\nThis Table Shows the Relationship Between Each Example Program Shown in Sections IV.A and the Data &amp; Analysis Subconcepts. Subconcepts That are Very Closely Related to Each Program are Marked With a Check Mark</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t7-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t7-3227765-small.gif\" alt=\"Table 7- &#10;This Table Shows the Relationship Between Each Example Program Shown in Sections IV.A and the Data &amp; Analysis Subconcepts. Subconcepts That are Very Closely Related to Each Program are Marked With a Check Mark\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div></div>\n<div class=\"section\" id=\"sec5\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION V.</div><h2>Experiments</h2></div><div class=\"section_2\" id=\"sec5a\"><h3>A. Experimental Setup</h3><p>To verify the effectiveness of the basic building blocks proposed in <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a> and the example program proposed in <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>, two text processing lectures (3 credits each, total of 6 credits) were conducted for graduate students. The curriculums of the two lectures were identical. Because all graduate students except one were K-12 (primary or secondary school) teachers, it was expected that our graduate students would be able to evaluate our research effectively. Of a total of 33 students, 18 students voluntarily responded to our online survey after taking one of our text processing lectures. Unfortunately, because we did not conduct a pre-test with these students, we could not quantitatively measure how their perceptions changed through our text processing lectures. Therefore, we decided to compare the survey results of the text processing lectures with those of our web scraping lectures conducted during the previous semester. A total of 16 students participated in the web scraping lectures, and 15 of them participated in our previous survey. These web scraping lectures are different from our text processing lectures in that they focus only on web scraping rather than text processing. <a ref-type=\"table\" anchor=\"table8\" class=\"fulltext-link\">Table 8</a> shows the number of students who took the text processing and web scraping classes and the number of students who participated in the corresponding surveys.<div class=\"figure figure-full table\" id=\"table8\"><div class=\"figcaption\"><b class=\"title\">TABLE 8 </b>\nTotal Number of Students Who Took the Text Processing (Our Approach) and Web Scraping (Our Previous Research) Lectures, and the Total Number of Students Who Participated in Each Survey</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t8-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t8-3227765-small.gif\" alt=\"Table 8- &#10;Total Number of Students Who Took the Text Processing (Our Approach) and Web Scraping (Our Previous Research) Lectures, and the Total Number of Students Who Participated in Each Survey\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p>All graduate students (K-12 teachers) who participated in the survey described their experiences when using block-based programming languages, using text-based programming languages, and teaching programming to their K-12 students. <a ref-type=\"fig\" anchor=\"fig15\" class=\"fulltext-link\">Figure 15</a> summarizes the programming experiences of the survey participants. On average, these teachers had approximately two years of block-based programming experience and less than six months of text-based programming experience. They had also been teaching programming to their primary/secondary school students for about a year.\n<div class=\"figure figure-full\" id=\"fig15\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin15-3227765-large.gif\" data-fig-id=\"fig15\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin15-3227765-small.gif\" alt=\"FIGURE 15. - Summary of the survey participants\u2019 experiences in block-based programming, text-based programming, and teaching programming to primary and secondary students.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 15. </b><fig><p>Summary of the survey participants\u2019 experiences in block-based programming, text-based programming, and teaching programming to primary and secondary students.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><p>All teachers implemented the basic building blocks shown in <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>, implemented the eleven example applications shown in <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>, and then answered the following five questions:\n<ol><li><p>Do you think K-12 students could implement these text processing programs easily?</p></li><li><p>Do you think K-12 students will be interested in these text processing programs?</p></li><li><p>Do you think these text processing applications are practical programs?</p></li><li><p>Do you think it will be helpful for K-12 students to improve their programming skills by implementing these text processing programs?</p></li><li><p>Do you think it will be helpful for K-12 students to improve their understanding of natural language processing or artificial intelligence by implementing these text processing programs?</p></li></ol> Here, because we used a 7-point Likert Scale, teachers were able to rate each question from 1 to 7 points. A score of 1 denotes strongly disagree, and a score of 7 denotes strongly agree.</p><p>In addition, the teachers were allowed freely to describe the strengths and weaknesses of these educational materials and to present any comments they would like to make. The next subsection (<a ref-type=\"sec\" anchor=\"sec5b\" class=\"fulltext-link\">Section V.B</a>) summarizes the survey results of teachers, and in <a ref-type=\"sec\" anchor=\"sec5c\" class=\"fulltext-link\">Section V.III</a>, we compare our results with those of our previous study.</p></div><div class=\"section_2\" id=\"sec5b\"><h3>B. Experimental Results</h3><p><a ref-type=\"fig\" anchor=\"fig16\" class=\"fulltext-link\">Figure 16</a> summarizes the teachers\u2019 responses to the five questions (Q1 to Q5) presented in <a ref-type=\"sec\" anchor=\"sec5a\" class=\"fulltext-link\">Section V.A</a>. Note that because a score of 4 indicates a neutral midpoint, a score lower than 4 indicates disagreement, and a score higher than 4 is considered to indicate agreement. For Q1, teachers responded with a low score of about 3 points. However, they answered the other questions with high overall scores, assigning scores of approximately 5.5 points for Q2, about 6 points for Q3 and Q4, and about 6.5 points for Q5. We describe and analyze the response results for each question in detail below.\n<div class=\"figure figure-full\" id=\"fig16\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin16-3227765-large.gif\" data-fig-id=\"fig16\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin16-3227765-small.gif\" alt=\"FIGURE 16. - Results of a survey of five questions conducted with teachers. A 7-point Likert scale was used, with points closer to 1 indicating more disagreement, those closer to 7 indicating more agreement, and scores of 4 indicating a neutral midpoint.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 16. </b><fig><p>Results of a survey of five questions conducted with teachers. A 7-point Likert scale was used, with points closer to 1 indicating more disagreement, those closer to 7 indicating more agreement, and scores of 4 indicating a neutral midpoint.</p></fig></div><p class=\"links\"><a href=\"/document/9976056/all-figures\" class=\"all\">Show All</a></p></div></p><div class=\"section_2\" id=\"sec5b1\"><h4>1) Q1. Do You Think K-12 Students Could Implement These Text Processing Programs Easily?</h4><p>Approximately 61% of teachers answered that it would be difficult for students to process texts according to these educational materials (less than 4 points). About 22% of teachers thought that the difficulty level would be suitable for students (4 points), and about 17% of teachers thought it would be easy for students to implement (more than 4 points). The representative comments of teachers who participated in the survey were as follows:\n<ul style=\"list-style-type:disc\"><li><p>\u201cThe program codes are difficult for K-6 (primary school) students to implement.\u201d</p></li><li><p>\u201cThese educational materials would be easy for primary and secondary school students to implement because they are based on a block-based programming language.\u201d</p></li><li><p>\u201cThe difficulty level is appropriate for secondary school students or primary school gifted students.\u201d</p></li><li><p>\u201cIt would be better if the educational materials were provided separately according to the level of the students.\u201d</p></li><li><p>\u201cAlthough the process of performing web scraping and training the data is easy, it is difficult for students to make string processing blocks.\u201d</p></li><li><p>\u201cIt is convenient to be able to train the model within Scratch.\u201d</p></li></ul></p><p>In summary, teachers responded that these educational materials were more suitable for secondary education rather than primary education in terms of difficulty. The main reason teachers felt that these materials were difficult for primary school students was that the transformation blocks shown in <a ref-type=\"sec\" anchor=\"sec3c\" class=\"fulltext-link\">Section III.C</a> were very complex. Rather, the teachers responded that the Collection blocks and Inference &amp; Models blocks introduced in <a ref-type=\"sec\" anchor=\"sec3b\" class=\"fulltext-link\">Sections III.B</a> and <a ref-type=\"sec\" anchor=\"sec3e\" class=\"fulltext-link\">III.E</a> would be very easy for their students to use.</p></div><div class=\"section_2\" id=\"sec5b2\"><h4>2) Q2. Do You Think K-12 Students Will be Interested in These Text Processing Programs?</h4><p>About 89% of teachers agree that these educational materials can arouse interest in their K-12 students (a score of 5 or higher). Specifically, the teachers stated that our materials had the following advantages with regard to stimulating students\u2019 interest:\n<ul style=\"list-style-type:disc\"><li><p>\u201cTraining the images displayed on the screen or doing web scraping can not only be easily implemented by primary school students but can also arouse their interest.\u201d</p></li><li><p>\u201cThese educational materials are excellent for stimulating the interest of gifted students. Existing K-12 programming educational materials are too easy, so students have a low sense of achievement after solving a given task, their interest is easily lost, and it is difficult to arouse a sense of challenge in them.\u201d</p></li><li><p>\u201cThese educational materials will be of great interest to students because they solve real-life problems.\u201d</p></li><li><p>\u201cPrimary school students are very interested in information related to our lives, not in textbooks. Even when studying programming, they are more interested in challenging tasks than simple ones. I think Tooee is a program that meets both of the above requirements.\u201d</p></li><li><p>\u201cThe example programs are full of personality. As an additional idea, it would also be interesting to create a program that shows the song rankings of students\u2019 favorite singers.\u201d</p></li><li><p>\u201cThe lecture was so much fun!\u201d</p></li></ul></p><p>In summary, our educational materials are expected to arouse the interest of students (especially gifted students) by allowing them to solve challenging real-life problems.</p></div><div class=\"section_2\" id=\"sec5b3\"><h4>3) Q3. Do You Think These Text Processing Applications are Practical Programs?</h4><p>All teachers who responded to the survey answered that the example programs we presented were practical (score of 5 or higher). The teachers gave a particularly positive evaluation of solving real-life problems using a block-based programming language. Below are some of the teachers\u2019 comments.\n<ul style=\"list-style-type:disc\"><li><p>\u201cIt is expected that students will be greatly motivated by implementing practical programs that can be used in everyday life.\u201d</p></li><li><p>\u201cThe web scraping blocks are very practical. It also seems important to instruct students not to abuse them.\u201d</p></li><li><p>\u201cExisting programming education materials often force students to learn skills mechanically. Because these educational materials are related to real life and utilize unstructured real data, students will be more interested in programming and will be able to understand it better.\u201d</p></li></ul></p></div><div class=\"section_2\" id=\"sec5b4\"><h4>4) Q4. Do You Think it Will be Helpful for K-12 Students to Improve Their Programming Skills by Implementing These Text Processing Programs?</h4><p>All teachers who responded to the survey answered this question positively (more than 5 points). The common opinion of many teachers is that the programming patterns (or methods) used in our educational materials are significantly different from those of existing materials. For example, the teachers did not have previous experience implementing a program such as that shown in <a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">Figure 5</a>. The teachers expected that students would benefit from this type of programming experience to improve their programming skills.\n<ul style=\"list-style-type:disc\"><li><p>\u201cThe advantage is that students can do new types of programming that they have not encountered in existing educational materials.\u201d</p></li><li><p>\u201cWhereas existing educational materials teach students programming in a simple and interesting way, these materials will make students think for themselves about what they can do and how to do it.\u201d</p></li><li><p>\u201cThe quality of programming and artificial intelligence education will go up to a new level when students have the experience of implementing cool programs that collect and utilize data using a block-based programming language. The programming classes currently being conducted in primary schools are at the beginner level, so I think that a programming course of intermediate difficulty or higher is necessary. It seems that there should be a lot of teacher training as well.\u201d</p></li></ul></p></div><div class=\"section_2\" id=\"sec5b5\"><h4>5) Q5. Do You Think it Will be Helpful for K-12 Students to Improve Their Understanding of Natural Language Processing or Artificial Intelligence by Implementing These Text Processing Programs?</h4><p>All teachers who responded to the survey responded positively to this question by giving it a score of 5 or higher. Many were of the opinion that that the model training blocks presented in this paper are easy to use and intuitive. In particular, many expressed the opinion that it would be better to publish a book that explained how to use the Tooee blocks so that many teachers can teach artificial intelligence in their schools easily using Scratch. One teacher noted that it was a great advantage to be able to experience natural language processing using a block-based programming language, and another teacher commented that it would be better to include educational materials that introduce how neural networks learn.</p></div></div><div class=\"section_2\" id=\"sec5c\"><h3>C. Analysis of Results</h3><p>In our previous study, we developed educational materials to teach web scraping and conducted lectures based on these materials. In this subsection, we compare and analyze the differences between our previously conducted web scraping lectures and the text processing lectures conducted as part of the present study. The survey formats of the two studies are nearly identical. For example, in our web scraping research, the first question (Q1) asks whether K-12 students can easily implement web scraping applications, whereas the first question (Q1) in this paper asks whether K-12 students can easily implement text processing programs. <a ref-type=\"table\" anchor=\"table8\" class=\"fulltext-link\">Table 8</a> shows the number of K-12 teachers who took the web scraping or text processing lectures and the number of K-12 teachers who responded to each survey. The web scraping lectures were held in the winter of 2021, and the text processing lectures were held in the summer of 2022. We assume that the students in both lectures are at the same level. Note that a 5-point Likert scale was used in the survey of the web scraping lectures, whereas a 7-point Likert scale was used in the survey of this study. Therefore, we converted the 5-point Likert scale to a 7-point Likert scale for a proper comparison.</p><p><a ref-type=\"table\" anchor=\"table9\" class=\"fulltext-link\">Table 9</a> compares the survey results obtained through the web scraping lectures and the text processing lectures. Here, in the second and third columns, the values outside the parentheses represent the means, and the values inside the parentheses represent the standard deviations. The fourth column of the table shows the p-values for the two-tailed Mann-Whitney U test. Obviously, as shown in the results of the first questions (Q1), the teachers expected that students would find text processing much more difficult than web scraping. This result is in line with the comments of teachers expressing that the Transformation blocks introduced in <a ref-type=\"sec\" anchor=\"sec3c\" class=\"fulltext-link\">Section III.C</a> are much more difficult than the blocks introduced in <a ref-type=\"sec\" anchor=\"sec3b\" class=\"fulltext-link\">Sections III.B</a> (Collection) and <a ref-type=\"sec\" anchor=\"sec3e\" class=\"fulltext-link\">III.V</a> (Inference &amp; Models). Similarly, for the second to fifth questions (Q2 to Q5), the text processing training materials scored relatively low compared to the web scraping training materials. However, the difference in scores was not as large as in the first questions.<div class=\"figure figure-full table\" id=\"table9\"><div class=\"figcaption\"><b class=\"title\">TABLE 9 </b>\nResults of Comparing Text Processing Lectures With the Web Scraping Lectures. In the Second and Third Columns, the Values Outside the Parentheses Represent the Means, and the Values Inside the Parentheses Represent the Standard Deviations. The Fourth Column Shows the Corresponding P-Values When the Two-Tailed Mann-Whitney U Test Was Used. Here, (*) Indicates That the p-Value is Less Than or Equal to 0.05, and (**) Indicates That the p-Value is Less Than or Equal to 0.1</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t9-3227765-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976056/shin.t9-3227765-small.gif\" alt=\"Table 9- &#10;Results of Comparing Text Processing Lectures With the Web Scraping Lectures. In the Second and Third Columns, the Values Outside the Parentheses Represent the Means, and the Values Inside the Parentheses Represent the Standard Deviations. The Fourth Column Shows the Corresponding P-Values When the Two-Tailed Mann-Whitney U Test Was Used. Here, (*) Indicates That the p-Value is Less Than or Equal to 0.05, and (**) Indicates That the p-Value is Less Than or Equal to 0.1\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p>In summary, given that a score of 4 is a neutral midpoint, our text processing educational materials received positive feedback overall from the teachers. However, our materials showed statistically significant differences for the three evaluation measures (Q1, Q3, and Q4) when compared with the web scraping educational materials. Because the code complexities of the text processing educational materials are much larger than those of the web scraping materials in general, it was already expected that they would score relatively low for the first evaluation measure (Q1). However, we did not expect our educational materials to score lower even for the third and fourth evaluation measures (Q3 and Q4), as the blocks proposed in this paper include all web scraping blocks. The results of the experiments can be interpreted as meaning that text processing is relatively more difficult for teachers than web scraping, and this difficulty negatively affects other evaluation measures other than the first evaluation measure (Q1). In other words, K-12 teachers need to put more effort into not increasing the complexity of the program codes when teaching text processing to their students.</p></div></div>\n<div class=\"section\" id=\"sec6\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION VI.</div><h2>Conclusion</h2></div><p>In this paper, we proposed novel programming blocks for primary and secondary school students to implement text processing applications using a block-based programming language. Specifically, first we presented five types of \u201cbasic building blocks\u201d for text processing. Note that each proposed block is effective in computer science education because it is closely related to the Data &amp; Analysis Subconcepts of ACM CSTA K-12 Computer Science Standards. For blocks that cannot be created using an existing block programming language, we modified Scratch to provide those blocks. In addition, we presented eleven text processing example applications that can be implemented using these basic building blocks. Two graduate lectures (6 credits in total) were conducted based on our educational materials, and the curriculums of the two lectures were identical. A total of 33 students took one of the lectures, and 18 of them participated in this study. Because all of the graduate students except for one are serving as primary or secondary school teachers, they were expected to be able to evaluate our study objectively. The experimental results show that our approach received positive evaluations on most of the evaluation measures (\u201carousing students\u2019 interest,\u201d \u201cpracticality,\u201d \u201cimproving students\u2019 programming skills,\u201d and \u201cimproving students\u2019 understanding of natural language processing or artificial intelligence\u201d). Also, our graduate students (K-12 teachers) found our educational materials to be more suitable for secondary school students (or primary school gifted students) than primary school students due to its difficulties.</p><p>Our future research is twofold: first we plan to make the text processing blocks easier, reflecting the teachers\u2019 feedback. The teachers noted that the four types of blocks (Storage, Collection, Visualization, and Inference &amp; Models) were easy to use, while the Transformation blocks were relatively difficult. Therefore, instead of having students create their own Transformation blocks, we would like to present more easy-to-use blocks that young students can use immediately without any preparation process. Second, we plan to create more diverse text processing educational materials. We would like to provide an improved programming environment where young students can experience the latest natural language processing research findings using a block-based programming language.</p></div>\n</div></div></response>\n"
}