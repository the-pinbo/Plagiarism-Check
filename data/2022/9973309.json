{
    "abstract": "Variable bandwidth channels can be created in Flexible Grid Optical Networks using Optical Orthogonal Frequency Division Multiplexing (O-OFDM). This allows more efficient spectrum use by allocating integral multiple of basic bandwidth slots (sub-channels) to the lightpath requests. In these networks, the constraint of keeping all the allocated slots together is added when deciding routes for the r...",
    "articleNumber": "9973309",
    "articleTitle": "Dynamic Routing and Spectrum Assignment Based on the Consecutive Sub-Channels in Flexible-Grid Optical Networks",
    "authors": [
        {
            "preferredName": "Varsha Lohani",
            "normalizedName": "V. Lohani",
            "firstName": "Varsha",
            "lastName": "Lohani",
            "searchablePreferredName": "Varsha Lohani"
        },
        {
            "preferredName": "Anjali Sharma",
            "normalizedName": "A. Sharma",
            "firstName": "Anjali",
            "lastName": "Sharma",
            "searchablePreferredName": "Anjali Sharma"
        },
        {
            "preferredName": "Yatindra Nath Singh",
            "normalizedName": "Y. N. Singh",
            "firstName": "Yatindra Nath",
            "lastName": "Singh",
            "searchablePreferredName": "Yatindra Nath Singh"
        }
    ],
    "doi": "10.1109/ACCESS.2022.3227438",
    "publicationTitle": "IEEE Access",
    "publicationYear": "2022",
    "publicationVolume": null,
    "publicationIssue": null,
    "volume": "10",
    "issue": null,
    "documentLink": "/document/9973309/",
    "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response><accessType>CCBY - IEEE is not the copyright holder of this material. Please follow the instructions via https://creativecommons.org/licenses/by/4.0/ to obtain full-text articles and stipulations in the API documentation.</accessType><div id=\"BodyWrapper\" class=\"ArticlePage\" xmlns:ieee=\"http://www.ieeexplore.ieee.org\"><div id=\"article\">\n<div class=\"section\" id=\"sec1\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION I.</div><h2>Introduction</h2></div><p>With the innovations continuously improving the performance of network endpoint devices, communication network capacities need to be continuously improved to meet the demands. All-Optical networks are used to provide the much needed increased capacity. The signal that traverses from a source to a destination node in these networks, remains in the optical domain <a ref-type=\"bibr\" anchor=\"ref1\" id=\"context_ref_1_1\">[1]</a>. These networks contain routing nodes interconnected by optical fiber links. The resources used in these links can be either fixed-width wavelength slots or flexible spectrum slots. Fixed width wavelength slots are generally based on the Dense Wavelength Division Multiplexing technique. The bandwidth of each channel within the network link, is fixed as either 50 GHz or 100 GHz according to ITU-T G.694.1 <a ref-type=\"bibr\" anchor=\"ref2\" id=\"context_ref_2_1\">[2]</a> specifications. High data-rate connection cannot be established due to limit posed by the slot width. At the same time, a very low data-rate lightpath requests will lead to bandwidth wastage. Jinno et al. <a ref-type=\"bibr\" anchor=\"ref3\" id=\"context_ref_3_1\">[3]</a> proposed the spectrum sliced elastic optical networks to resolve this problems.</p><p>Use of Optical-Orthogonal Frequency Division Multiplexing (O-OFDM), allows the further reduction of the channel size to 12.5 GHz thereby improving the granularity of bandwidth allocation with flexibility. The multiple adjacent sub-channels can be used together to accommodate high data-rate connection demands. Such networks are called Flexible-grid Optical Networks. They provide a scalable network architecture using Bandwidth Variable-Wavelength Cross-connects (BV-WXC) and Bandwidth Variable Transponders (BVT). An overview of Flexible-grid Optical Network and the related design issues can be found in <a ref-type=\"bibr\" anchor=\"ref4\" id=\"context_ref_4_1\">[4]</a> and <a ref-type=\"bibr\" anchor=\"ref5\" id=\"context_ref_5_1\">[5]</a>.</p><p>One of the research problems in Flexible-grid Optical Networks is Routing and Spectrum Assignment (RSA). The routing of a lightpath request implies finding an end-to-end path between source and destination nodes using a suitable algorithm. Spectrum assignment implies finding out the link resources for the path setup request while following the relevant constraints. This paper aims to improve the RSA algorithms for flexible grid optical networks to reduce the blocking probability, to cater for more connection requests with reduced computational complexity. However, due to spectrum elasticity, the Flexible-grid also adds contiguity constraints to the RSA problem. This additional constraint and the fluctuating traffic results in the fragmentation of the spectrum. As a consequence, there is an increase in the blocking probability of lightpath requests.</p><p>The paper is organised as follows. The basic concept of Routing and Spectrum Allocation is explained through examples in <a ref-type=\"sec\" anchor=\"sec2\" class=\"fulltext-link\">Section II</a>. In <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>, the problem being investigated in this paper is stated. The proposed solution is mentioned in <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>. In <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a>, network definition, tackling unequal capacity on edges, and different proposed RSA algorithms have also been presented. Numerical results are shown for two example networks in <a ref-type=\"sec\" anchor=\"sec5\" class=\"fulltext-link\">Section V</a>, where different network settings are used to understand the performance of the proposed algorithms. Finally, we conclude the work in <a ref-type=\"sec\" anchor=\"sec6\" class=\"fulltext-link\">Section VI</a>.</p></div>\n<div class=\"section\" id=\"sec2\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION II.</div><h2>Routing and Spectrum Assignment (RSA)</h2></div><p>The objective of RSA is to find routes <a ref-type=\"fn\" anchor=\"fn1\" class=\"footnote-link\">1</a> over the network <a ref-type=\"bibr\" anchor=\"ref6\" id=\"context_ref_6_2\">[6]</a> and allocate spectrum resources to the lightpath requests while using minimum resources and accommodating maximum lightpath requests.</p><p>In RSA, there are constraints for spectrum assignment, which need to be satisfied as explained with the help of <a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a>. A lightpath request arrives for three slots connection assignment from source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${A}$\n</tex-math></inline-formula> to destination node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${C}$\n</tex-math></inline-formula>. <b>Spectrum Contiguity Constraint:</b> The assigned spectrum slots indexes 2, 3, 4 or 6, 7, 8 for link A-B and 3, 4, 5 or 4, 5, 6 or 5, 6, 7 or 6, 7, 8 can be used for link B-C as the possible group of three slots sharing boundary with each other. This is contiguity constraint. <b>Spectrum Continuity Constraint:</b> The assigned continuous spectrum slots indexes 6, 7, 8 for a lightpath request A-B-C is same throughout the path. <b>Non-Overlapping Constraint:</b> The assigned indexes to different requests cannot overlap with one other. It is consequence of capability of a slot to carry one signal at a time. Therefore, the slot indexes 6, 7, and 8 are assigned as it satisfies the requirements.\n<div class=\"figure figure-full\" id=\"fig1\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan1-3227438-large.gif\" data-fig-id=\"fig1\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan1-3227438-small.gif\" alt=\"FIGURE 1. - Example of constraints used for routing and spectrum allocation of lightpath request.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 1. </b><fig><p>Example of constraints used for routing and spectrum allocation of lightpath request.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p><p>Finding a suitable RSA algorithm lies at the core of the Flexible-grid optical networks design. It is supposed to achieve efficient spectrum utilization while accommodating maximum number of lightpath requests. There exist various RSA algorithms in the literature <a ref-type=\"bibr\" anchor=\"ref7\" id=\"context_ref_7_2\">[7]</a>, <a ref-type=\"bibr\" anchor=\"ref8\" id=\"context_ref_8_2\">[8]</a>, <a ref-type=\"bibr\" anchor=\"ref9\" id=\"context_ref_9_2\">[9]</a>, <a ref-type=\"bibr\" anchor=\"ref10\" id=\"context_ref_10_2\">[10]</a>, <a ref-type=\"bibr\" anchor=\"ref11\" id=\"context_ref_11_2\">[11]</a>, <a ref-type=\"bibr\" anchor=\"ref12\" id=\"context_ref_12_2\">[12]</a>, which envisage to reduce the blocking of arriving lightpath requests. In these papers, various heuristics for RSA have been proposed to reduce the blocking probability of lightpath requests. The problem has been attempted using many methods like employing different routing schemes, devising spectrum assignment algorithms based on the cost of paths, and distance-adaptive modulation level manipulation. In <a ref-type=\"bibr\" anchor=\"ref13\" id=\"context_ref_13_2\">[13]</a>, the modulation format as another dimension for manipulating the bandwidth in different sections of a lightpath, is introduced in the Elastic optical network. The authors in <a ref-type=\"bibr\" anchor=\"ref14\" id=\"context_ref_14_2\">[14]</a> proposed heuristics for Dynamic routing and spectrum (re)allocation, where the allocated lightpath requests are re-allocated the optical spectrum to make room for new lightpath requests. Few research works <a ref-type=\"bibr\" anchor=\"ref10\" id=\"context_ref_10_2\">[10]</a> and <a ref-type=\"bibr\" anchor=\"ref15\" id=\"context_ref_15_2\">[15]</a> also considered multipath routing for RSA in EON to accommodate more lightpath requests as well as to reduce the blocking probability. Fixed parameters e.g., distance (in km), hops, etc., are used for deciding the optimal route in most of these works. In the current work, we are considering adaptive parameters (which change with network conditions) for RSA. The spectrum resources are allotted at the connection setup time and released only when the connection is dismantled.</p><p>One of the problems due to the spectrum assignment constraints is Spectrum Fragmentation. It can be explained with the help of an example shown in <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a>. A lightpath request for four slots arrives from the source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${A}$\n</tex-math></inline-formula> to the destination node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${C}$\n</tex-math></inline-formula>. Although the four slots are available but they cannot be allocated, as we have to follow spectrum assignment constraints (<a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a>). It leads to the blocking of the lightpath request due to fragmentation. If spectrum converters are present at each node, the fragmentation can be mitigated to some extent, but converters are expensive to deploy.\n<div class=\"figure figure-full\" id=\"fig2\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan2-3227438-large.gif\" data-fig-id=\"fig2\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan2-3227438-small.gif\" alt=\"FIGURE 2. - Spectrum fragmentation example.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 2. </b><fig><p>Spectrum fragmentation example.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p><p>Chatterjee et al. <a ref-type=\"bibr\" anchor=\"ref16\" id=\"context_ref_16_2\">[16]</a> have extensively studied the various forms of fragmentation. The survey paper presents various types of fragmentation metrics and de-fragmentation strategies. They also discussed various RSA strategies based on the fragmentation metrics without any de-fragmentation procedures. Also, numerous de-fragmentation algorithms have been proposed to reduce the spectrum fragmentation periodically. In <a ref-type=\"bibr\" anchor=\"ref17\" id=\"context_ref_17_2\">[17]</a>, the authors have presented a path-based method to calculate fragmentation level and then to employ it in RSA decision making. <a ref-type=\"bibr\" anchor=\"ref18\" id=\"context_ref_18_2\">[18]</a>, <a ref-type=\"bibr\" anchor=\"ref19\" id=\"context_ref_19_2\">[19]</a> further explored fragmentation-aware routing and spectrum allocation, considering both contiguity and continuity aspects. Basically, various parameters of the spectrum in the network links are observed, and based on their state; the routing decisions are made. These parameters may or may not directly affect the fragmentation level. The contiguity of the spectrum slices is one of the most prominent indicators of fragmentation level. Therefore, it is also possible to use suitable RSA algorithms to minimize contiguity fragmentation during the network operation. De-fragmentation procedures, whenever invoked, disrupts the existing traffic in the network for the period required for reconfiguration, which leads to another inefficiency in network performance.</p></div>\n<div class=\"section\" id=\"sec3\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION III.</div><h2>Problem Statement</h2></div><p>The RSA algorithms can be further classified into <i>offline RSA</i> where the lightpath requests are known in advance, and <i>online RSA</i> in which the lightpath requests arrive and get released as time progresses. The later scenario is more realistic. In this paper, we are considering online RSA without any periodic de-fragmentation. The RSA problem is further sub-classified based on whether the static or adaptive parameters are considered for routing. The static parameters for routing are independent of the changes within the network; while the adaptive parameters for routing change continuously with the changes in the network conditions.</p><p>Many research works discussed in <a ref-type=\"sec\" anchor=\"sec2\" class=\"fulltext-link\">Section II</a>, consider static parameters such as fixed distance and hops<a ref-type=\"fn\" anchor=\"fn2\" class=\"footnote-link\">2</a> for routing of lightpath requests from source to destination. Some of them also consider adaptive parameters for Routing and Spectrum Assignment. References <a ref-type=\"bibr\" anchor=\"ref20\" id=\"context_ref_20_3\">[20]</a>, <a ref-type=\"bibr\" anchor=\"ref21\" id=\"context_ref_21_3\">[21]</a>, <a ref-type=\"bibr\" anchor=\"ref22\" id=\"context_ref_22_3\">[22]</a> use relative cost parameter (e.g. link congestion) which changes during the network operation while performing Routing and Spectrum Assignment for incoming lightpath requests. For various cases, the algorithms have been analyzed. In essence, the algorithms select the route/spectrum set with the least relative cost. Y. Zhou <i>et. al</i> <a ref-type=\"bibr\" anchor=\"ref23\" id=\"context_ref_23_3\">[23]</a> computes the link-state based on Chromatic Dispersion and Optical Signal to Noise Ratio (OSNR). This link-state is used for routing purposes. Another adaptive parameter that has been discussed in the literature is crosstalk <a ref-type=\"bibr\" anchor=\"ref24\" id=\"context_ref_24_3\">[24]</a>, <a ref-type=\"bibr\" anchor=\"ref25\" id=\"context_ref_25_3\">[25]</a>, <a ref-type=\"bibr\" anchor=\"ref26\" id=\"context_ref_26_3\">[26]</a>. The crosstalk occurs within the multi-core fibres and has a bearing on Routing, Core and Spectrum Assignment in Space Division Multiplexed Elastic Optical Networks. In <a ref-type=\"bibr\" anchor=\"ref27\" id=\"context_ref_27_3\">[27]</a>, authors studied the problem of spectrum de-fragmentation in crosstalk aware RCSA.</p></div>\n<div class=\"section\" id=\"sec4\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION IV.</div><h2>Proposed Solution</h2></div><p>One of the adaptive parameters that can be effective for RSA is consecutive spectrum slots on each network link. One can use this parameter for routing purposes in conjunction with the works mentioned earlier (<a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>). In the present work, our objective is to find suitable routes and spectrum slots for incoming lightpath requests using an adaptive parameter called <b>Link Spectrum Consecutiveness</b> in dynamic traffic scenario. At the same time, we are minimizing the fragmentation within the network without performing any de-fragmentation strategies so that we can accommodate the maximum number of requests. We are not using any de-fragmentation strategy as it causes interruption of active lightpath requests.</p><div class=\"section_2\" id=\"sec4a\"><h3>A. Network Model and Notations Used</h3><p>In <a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">table 1</a>, various notations used in the paper is summarized. The detailed description is given here.\n<ul style=\"list-style-type:disc\"><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V,E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>: We represent an optical network as a graph <i>G(V, E)</i> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${G}$\n</tex-math></inline-formula> is defined as a set of optical vertices (nodes) <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${V}$\n</tex-math></inline-formula>, indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${v}$\n</tex-math></inline-formula> and set of optical fiber edges (links) <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${E}$\n</tex-math></inline-formula>, indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${e}$\n</tex-math></inline-formula>. Each edge is connected to a pair of vertices e.g., <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(i, j) \\in E$\n</tex-math></inline-formula>, where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$j \\in V$\n</tex-math></inline-formula>. Each edge <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${e}\\in {E}$\n</tex-math></inline-formula> has usable bandwidth, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B_{e}$\n</tex-math></inline-formula>. The <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B_{e}$\n</tex-math></inline-formula> is partitioned into multiple spectrum slots in order to be used efficiently. We define a bitmap, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e}$\n</tex-math></inline-formula> (sequence of 1s and 0s) on an edge <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$e \\in E$\n</tex-math></inline-formula> to model the availability status of the spectrum slots. The number of the possible spectrum slots on an edge <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${e}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e}|$\n</tex-math></inline-formula> is represented by <disp-formula id=\"deqn1\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} |\\Delta _{e}| = \\Bigl \\lfloor {\\dfrac {\\text {Total Usable Bandwidth}(B_{e})}{\\text {Grid Size}}}\\Bigr \\rfloor. \\tag{1}\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} |\\Delta _{e}| = \\Bigl \\lfloor {\\dfrac {\\text {Total Usable Bandwidth}(B_{e})}{\\text {Grid Size}}}\\Bigr \\rfloor. \\tag{1}\\end{equation*}\n</span></span></disp-formula> Suppose each edge has same set (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">${F}$\n</tex-math></inline-formula>) of spectrum slots (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$f_{s}$\n</tex-math></inline-formula>), then the bitmap for an edge can be represented as <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e} = [f_{1},\\ldots.,f_{|F|}]$\n</tex-math></inline-formula> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$f_{s}$\n</tex-math></inline-formula> can be either 0 or 1 depending on the condition whether the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s^{th}$\n</tex-math></inline-formula> frequency slot is busy or free respectively. The bit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e}$\n</tex-math></inline-formula> is represented as <disp-formula id=\"deqn2\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*} \\Delta _{e}[s] = \\begin{cases} 1, &amp;\\text {if } s^{th} ~\\text {slot on edge}~ e ~\\text {is free,}\\\\ 0, &amp;\\text {if } s^{th} \\text {slot on edge}~ e ~\\text {is occupied.} \\end{cases} \\tag{2}\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*} \\Delta _{e}[s] = \\begin{cases} 1, &amp;\\text {if } s^{th} ~\\text {slot on edge}~ e ~\\text {is free,}\\\\ 0, &amp;\\text {if } s^{th} \\text {slot on edge}~ e ~\\text {is occupied.} \\end{cases} \\tag{2}\\end{align*}\n</span></span></disp-formula></p><p>The slot availability status can be easily propagated for a destination through the neighbours by simply performing AND operation of the current status with the slot availability status in the links to neighbour.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s,d,| \\Delta ^{r} |, k)$\n</tex-math></inline-formula> is a Lightpath Request where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> is the source node, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s \\in V$\n</tex-math></inline-formula>, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> is the destination node, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d \\in V$\n</tex-math></inline-formula>. In a network <i>G(V, E)</i>, if a lightpath request arrives with a required bandwidth of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B^{r}$\n</tex-math></inline-formula> for an s-d pair, then the number of the required contiguous spectrum slots on any choosen path is computed with the <a ref-type=\"disp-formula\" anchor=\"deqn3\" href=\"#deqn3\" class=\"fulltext-link\">eq. 3</a>.<disp-formula id=\"deqn3\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*} |\\Delta ^{r}| = \\Bigl \\lceil {\\dfrac {\\textrm {Required Bandwidth}(B^{r})}{\\text {Grid Size} * m}}\\Bigr \\rceil + \\Bigl \\lceil {\\dfrac {\\text {GB}}{\\text {Grid Size}}}\\Bigr \\rceil. \\\\{}\\tag{3}\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*} |\\Delta ^{r}| = \\Bigl \\lceil {\\dfrac {\\textrm {Required Bandwidth}(B^{r})}{\\text {Grid Size} * m}}\\Bigr \\rceil + \\Bigl \\lceil {\\dfrac {\\text {GB}}{\\text {Grid Size}}}\\Bigr \\rceil. \\\\{}\\tag{3}\\end{align*}\n</span></span></disp-formula> Here <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m$\n</tex-math></inline-formula> is the number of bits per symbol (modulation level) used depending on the path length of the lightpath. We are also considering an additional guard band (GB) such that no two lightpaths interfere if they are placed next to each other. The maximum number of paths to be computed by RSA is represented by k, a positive integer.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{p}$\n</tex-math></inline-formula> is the bitmap of available spectrum slots in path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p$\n</tex-math></inline-formula> from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula>. The availability bitmap for a path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{p}$\n</tex-math></inline-formula> can be achieved by intersecting or Bit-wise ANDing of bit maps on all the constituent edges of path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p$\n</tex-math></inline-formula><disp-formula id=\"deqn4\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\Delta _{p} = \\{\\Delta _{p}[l]\\} = \\{ \\bigcap \\limits ^{L}_{i=1} \\Delta _{e_{i}}[l] \\}. \\tag{4}\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\Delta _{p} = \\{\\Delta _{p}[l]\\} = \\{ \\bigcap \\limits ^{L}_{i=1} \\Delta _{e_{i}}[l] \\}. \\tag{4}\\end{equation*}\n</span></span></disp-formula></p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(u, v) \\in E$\n</tex-math></inline-formula> is the edge joining the pair of vertices (nodes), where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$u \\in V$\n</tex-math></inline-formula> is the starting (head) node and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$v \\in V$\n</tex-math></inline-formula> is the ending (tail) node.</p></li></ul><div class=\"figure figure-full table\" id=\"table1\"><div class=\"figcaption\"><b class=\"title\">TABLE 1 </b>\nNotations Used</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan.t1-3227438-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan.t1-3227438-small.gif\" alt=\"Table 1- &#10;Notations Used\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div><div class=\"section_2\" id=\"sec4b\"><h3>B. Cases of Equal and Unequal Capacities on the Network Links</h3><p>Suppose the fibers are deployed between different pair of nodes in a network at different time instants; consequently the bandwidth capacity of some of the fiber links/edges may be different, subject to technological advancements at the time of deployment. Let the bitmap of edge 1 be <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{1}}$\n</tex-math></inline-formula> and edge 2 be <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{2}}$\n</tex-math></inline-formula> and suppose <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{1}}| &gt;|\\Delta _{e_{2}}|$\n</tex-math></inline-formula>. This is the case of non-uniform bandwidth, hence, the bitmap sequence, on the edges of the network. The <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(|\\Delta _{e_{1}}|-|\\Delta _{e_{2}}|)$\n</tex-math></inline-formula> slots are zero-padded in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{2}}$\n</tex-math></inline-formula> to make uniform size of bitmap sequences for all the links in the network for the proposed algorithms. However, the zero-padded bit sequences remain unavailable for use by lightpath requests, independently of the network conditions. Now, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e}[s] = 0$\n</tex-math></inline-formula> in <a ref-type=\"disp-formula\" anchor=\"deqn2\" href=\"#deqn2\" class=\"fulltext-link\">eq. 2</a>, when <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s^{th}$\n</tex-math></inline-formula> slot on edge <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${e}$\n</tex-math></inline-formula> is occupied or unavailable.</p><p><a ref-type=\"disp-formula\" anchor=\"deqn4\" href=\"#deqn4\" class=\"fulltext-link\">Eq. 4</a> holds for both the cases of uniform and non-uniform bandwidth provisioning on the edges in the network. Here, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$L$\n</tex-math></inline-formula> is the number of hops for a path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p$\n</tex-math></inline-formula>.\n<ol><li><p>Consider a uniform network with three link lightpath (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p$\n</tex-math></inline-formula>) <i>A-B-C-D</i> as shown in <a ref-type=\"fig\" anchor=\"fig3\" class=\"fulltext-link\">Figure 3a</a>. Each link on a path has 8 slots. The slot values are represented with 1s and 0s based on the availability status. The value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{1}}$\n</tex-math></inline-formula> for edge 1 is 00111001, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{2}}$\n</tex-math></inline-formula> for edge 2 is 11111001, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{3}}$\n</tex-math></inline-formula> for edge 3 is 10011001. Therefore, <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\Delta _{p} = \\{ \\bigcap \\limits ^{3}_{i=1} \\Delta _{e_{i}} \\} = 00011001.\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\Delta _{p} = \\{ \\bigcap \\limits ^{3}_{i=1} \\Delta _{e_{i}} \\} = 00011001.\\end{equation*}\n</span></span></disp-formula></p></li><li><p>Now consider the case when the bandwidths on the links are different as shown in <a ref-type=\"fig\" anchor=\"fig3\" class=\"fulltext-link\">Figure 3b</a>. The values of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{1}}$\n</tex-math></inline-formula> for edge 1 is 00111, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{2}}$\n</tex-math></inline-formula> for edge 2 is 111110, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{3}}$\n</tex-math></inline-formula> for edge 3 is 100110011. The number of available slots on edge 1, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{1}}|$\n</tex-math></inline-formula>, is 5 on edge 2, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{2}}|$\n</tex-math></inline-formula>, is 6, and on edge 3, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{3}}|$\n</tex-math></inline-formula>, is 9 i.e., <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{1}}| &lt; |\\Delta _{e_{2}}| &lt; |\\Delta _{e_{3}}|$\n</tex-math></inline-formula>. The number of slots on edge 3 is the highest so there is no zero-padding for it; however, zero-padding is needed for edge 1 and edge 2. After zero-padding, the number of slots on <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{2}}|$\n</tex-math></inline-formula> changes to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{2}}| + (|\\Delta _{e_{3}}| - |\\Delta _{e_{2}}|)$\n</tex-math></inline-formula>, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{1}}|$\n</tex-math></inline-formula> changes to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{e_{1}}| + (|\\Delta _{e_{3}}| - |\\Delta _{e_{1}}|)$\n</tex-math></inline-formula>. The difference part is zero-padded to the edge 1 and edge 2 slots. Therefore, now the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{1}}$\n</tex-math></inline-formula> for edge 1 is 001110000, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{e_{2}}$\n</tex-math></inline-formula> for edge 2 is 111110000, and hence <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\Delta _{p} = \\{ \\bigcap \\limits ^{3}_{i=1} \\Delta _{e_{i}} \\} = 000110000.\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\Delta _{p} = \\{ \\bigcap \\limits ^{3}_{i=1} \\Delta _{e_{i}} \\} = 000110000.\\end{equation*}\n</span></span></disp-formula></p></li></ol>\n<div class=\"figure figure-full\" id=\"fig3\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan3-3227438-large.gif\" data-fig-id=\"fig3\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan3-3227438-small.gif\" alt=\"FIGURE 3. - Examples show a lightpath request with three links and their spectrum status.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 3. </b><fig><p>Examples show a lightpath request with three links and their spectrum status.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p></div><div class=\"section_2\" id=\"sec4c\"><h3>C. Proposed Algorithms</h3><p>In this paper, we proposed three algorithms for the joint optimization of Routing and Spectrum Assignment, which use the availability of consecutive spectrum slots for routing. If a lightpath with required slots is available, the spectrum slots are allocated to the request and lightpath is established; otherwise, the request will be blocked.</p><div class=\"section_2\" id=\"sec4c1\"><h4>1) Type I: Routing and Spectrum Assignment Based on Available Consecutive Slots (RSACS)</h4><p>The Type I RSACS algorithm selects a path from the set of available paths. In this algorithm, whenever a new lightpath request <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s,d,| \\Delta ^{r} |)$\n</tex-math></inline-formula> arrives, the algorithm traverses from the source node to its neighbouring nodes and so on, based on the available spectrum slots. If even one spectrum slot is not available through a link, the search through that link is terminated. The search continues through the other links to find all possible paths with at least one contiguous slot. The process continues until we reach the destination node. At the end of the algorithm, we will find all possible paths from source node to the destination node along with the number of available contiguous slots. The best path among all the found paths having the required number of contiguous slots, is allocated to the lightpath request based on the first-fit spectrum assignment as specified in the <a ref-type=\"algorithm\" anchor=\"alg1\" class=\"fulltext-link\">Algorithm 1</a>. The set of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> (where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> is a positive integer) possible paths is computed using CandidatePaths() function (<a ref-type=\"algorithm\" anchor=\"alg2\" class=\"fulltext-link\">Algorithm 2</a>). In this function, the search for the candidate paths starts from the source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula>. Then in each iteration, based on the number of hops, the nodes are added. In other words, with the increase in the number of iteration, the number of hops for each path in the list keeps on increasing.<div class=\"algorithm\" id=\"alg1\"><h4>Algorithm 1 Type I: RSACS</h4><p><b>Input:</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, |\\Delta ^{r}|, k)$\n</tex-math></inline-formula></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath \\leftarrow $\n</tex-math></inline-formula> list of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> candidate paths alongwith available slots from s to d using CandidatePaths(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e}\\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>) % <a ref-type=\"algorithm\" anchor=\"alg2\" class=\"fulltext-link\">Algorithm 2</a></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> is not empty <b>then</b></p><p><b>for</b> all the paths in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> <b>do</b></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\text {MaxContg}{\\Delta _{i}}| &gt;= |\\Delta ^{r}|$\n</tex-math></inline-formula> then %MaxContg returns the number of maximum contiguous slots available in bitmap.</p><p><b>Return</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$BestPath = AllPath(i)$\n</tex-math></inline-formula> %First one in the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> which satisfy the constraint is picked. There can be other ways of choosing if more than one options are there.</p><p><b>else</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i++$\n</tex-math></inline-formula></p><p><b>end if</b></p><p><b>end for</b></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$BestPath$\n</tex-math></inline-formula> is empty <b>then</b></p><p>Block the request</p><p><b>end if</b></p><p><b>else</b></p><p>Block the request</p><p><b>end if</b></p></div><div class=\"algorithm\" id=\"alg2\"><h4>Algorithm 2 CandidatePaths()</h4><p>function CandidatePaths(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e}\\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>) %First <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> paths during the search returned by the function.</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath =$\n</tex-math></inline-formula> [] %Contains the list of all the paths possible with slots available in them, at the end of function.</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path = [s]$\n</tex-math></inline-formula> %A path is an ordered list of nodes with neighbouring nodes having a link between them. Path is initialized with one entry for source <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${s}$\n</tex-math></inline-formula>.</p><p><b>while</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path$\n</tex-math></inline-formula> is not empty <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp =$\n</tex-math></inline-formula> []</p><p><b>for</b> all paths in <i>Path</i> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$u = Path(i).end$\n</tex-math></inline-formula> % <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$u$\n</tex-math></inline-formula> is the end node as of now for the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i^{th}$\n</tex-math></inline-formula> path entry</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{ v \\} = \\text {adj}{u}) \\backslash Path(i)$\n</tex-math></inline-formula> %adj function returns set of all neighbours of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${u}$\n</tex-math></inline-formula> excluding the ones already on <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path(i)$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\backslash $\n</tex-math></inline-formula> sign indicate exclusion. All nodes in the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i^{th}$\n</tex-math></inline-formula> path are excluded</p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{ v \\}$\n</tex-math></inline-formula> is not empty <b>then</b></p><p><b>for</b> all nodes in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{ v \\}$\n</tex-math></inline-formula> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$j$\n</tex-math></inline-formula> <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{i} \\leftarrow \\Delta _{i} \\cap \\Delta _{(u,v(j))}$\n</tex-math></inline-formula></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\text {sum}{\\Delta _{i}} \\neq 0$\n</tex-math></inline-formula> <b>then %</b> sum function gives the number of available slots in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> with bitmap <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{i}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path(i)$\n</tex-math></inline-formula> should not be considered if sum is zero.</p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$v(j) == d $\n</tex-math></inline-formula> <b>then</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath = AllPath + [(Path(i), v(j));{\\Delta _{i}}]$\n</tex-math></inline-formula> %add the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$[(Path(i), v(j));{\\Delta _{i}}]$\n</tex-math></inline-formula>, as another path from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\Delta _{i}}$\n</tex-math></inline-formula> available slots.</p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$size(AllPath) == k$\n</tex-math></inline-formula> <b>then</b></p><p><b>Return</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula></p><p><b>end if</b></p><p><b>else</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp = tmp + [(Path(i), v(j));{\\Delta _{i}}]$\n</tex-math></inline-formula> %add the path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$[(Path(i), v(j));{\\Delta _{i}}]$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp$\n</tex-math></inline-formula> path storage.</p><p><b>end if</b></p><p><b>end if</b></p><p><b>end for</b></p><p><b>end if</b></p><p><b>end for</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path = tmp$\n</tex-math></inline-formula> %All new paths learnt are stored in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path$\n</tex-math></inline-formula>. All older values in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path$\n</tex-math></inline-formula> discarded.</p><p><b>end while</b></p><p><b>Return</b>: <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula></p><p><b>end function</b></p></div></p><p>The search is terminated when the destination node is found for at most <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> paths or no more paths are possible. The paths which have slots greater or equal to the required slots are selected. The paths we found using the CandidatePaths() function, are sorted based on the number of hops. After finding candidate paths as a list of paths with available slots greater than or equal to one, allocation to requests is done. The first path may or may not have slots greater than or equal to the required number of slots. If the first path has the required number of slots, that path will be the best. Otherwise, we have to move on to the next path in the list. Whichever path fulfils the condition, we select that path for Routing and Spectrum Assignment. Based on the first fit, the slots are chosen from the set of slots present on the selected path.</p><p>In the <a ref-type=\"algorithm\" anchor=\"alg2\" class=\"fulltext-link\">Algorithm 2</a>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp$\n</tex-math></inline-formula> is the temporary matrix. It contains the list of those paths for which search have not arrived at the destination node. Once the destination node is found, the path will go to the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> list. Also, when the size of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> reaches <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> (any integer), we will purge out the paths in the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp$\n</tex-math></inline-formula>.</p><p>Although for single-path routing, this algorithm has higher time complexity, but it is still useful for multipath routing <a ref-type=\"bibr\" anchor=\"ref10\" id=\"context_ref_10_4c1\">[10]</a>, <a ref-type=\"bibr\" anchor=\"ref15\" id=\"context_ref_15_4c1\">[15]</a> as the source node has the details of all the paths with the spectrum slots available in them. If there are no paths with required available slots, the source node can select multiple paths whose combined available slots are greater than or equal to the required slots. Though, for the feasibility of this scenario, capability to split the transmitted signal into multiple streams should exist at the source node. We can reduce the blocking probability of the lightpath requests with this method.</p></div><div class=\"section_2\" id=\"sec4c2\"><h4>2) Type II: Routing and Spectrum Assignment Based on Required Consecutive Slots</h4><p><a ref-type=\"algorithm\" anchor=\"alg3\" class=\"fulltext-link\">Algorithm 3</a> is second RSA algorithm. It is called Type II: Routing and Spectrum Assignment based on Consecutive Slots. It is another way of routing using consecutive spectrum slots. Each node checks the contiguous required slots with the slots present after Bit-wise ANDing of the bitmap of path from source node and the bitmap of the link from the current node to the neighbouring node. If the current node is the destination node, that path will be considered for RSA. But, if the required slots are not available from source to the current node, then no path is feasible via current node. In this method, computational time is reduced as we need to compute the candidate path only with minimum required contiguous slots.<div class=\"algorithm\" id=\"alg3\"><h4>Algorithm 3 Type II: RSACS</h4><p><b>Input:</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, |\\Delta ^{r}|, 1)$\n</tex-math></inline-formula></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath \\leftarrow $\n</tex-math></inline-formula> A candidate path (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k =1$\n</tex-math></inline-formula>) from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> using CandidatePaths(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, |\\Delta ^{r}|, 1)$\n</tex-math></inline-formula>) % <a ref-type=\"algorithm\" anchor=\"alg4\" class=\"fulltext-link\">Algorithm 4</a></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> is not empty <b>then</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$BestPath = AllPath(1)$\n</tex-math></inline-formula></p><p><b>Return</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$BestPath$\n</tex-math></inline-formula></p><p><b>else</b></p><p>Block the request;</p><p><b>end if</b></p></div></p><p>The role of function CandidatePaths() (<a ref-type=\"algorithm\" anchor=\"alg4\" class=\"fulltext-link\">Algorithm 4</a>) changes slightly and it finds best candidate paths with at least <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta ^{r}|$\n</tex-math></inline-formula> contiguous slots. In this function, the search for the candidate path originates from the source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula>. Then for each iteration, the number of hops for each path in the list keeps on increasing.<div class=\"algorithm\" id=\"alg4\"><h4>Algorithm 4 CandidatePaths() <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\rightarrow$\n</tex-math></inline-formula> Path With Contiguous Slots <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\geq~~\\Delta^{r}$\n</tex-math></inline-formula></h4><p>function CandidatePaths(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e}\\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, |\\Delta ^{r})|, k$\n</tex-math></inline-formula>)</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath =$\n</tex-math></inline-formula> []</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path = [s]$\n</tex-math></inline-formula></p><p><b>while</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path$\n</tex-math></inline-formula> is not empty <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp =$\n</tex-math></inline-formula> []</p><p><b>for</b> all paths in <i>Path</i> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$u = Path(i).end$\n</tex-math></inline-formula></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{v\\} = \\text {Adj}{u}) \\backslash Path(i)$\n</tex-math></inline-formula></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{v\\} \\neq {[]}$\n</tex-math></inline-formula> <b>then</b></p><p><b>for</b> all nodes in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\{ v \\}$\n</tex-math></inline-formula> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$j$\n</tex-math></inline-formula> <b>do</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{i} \\leftarrow \\Delta _{i} \\cap \\Delta _{(u,v(j))}$\n</tex-math></inline-formula></p><p><b>if</b> IsFeasible(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(\\Delta _{i}, |\\Delta ^{r}|$\n</tex-math></inline-formula>) <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$==\\mathrm{T{\\scriptstyle RUE}}$\n</tex-math></inline-formula> <b>then</b></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$v(j) == d $\n</tex-math></inline-formula> <b>then</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath = AllPath + [Path(i), v(j)]$\n</tex-math></inline-formula></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$size(AllPath) == k$\n</tex-math></inline-formula> <b>then</b></p><p><b>Return</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula></p><p><b>end if</b></p><p><b>else</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$tmp = tmp + [Path(i), v(j)]$\n</tex-math></inline-formula></p><p><b>end if</b></p><p><b>end if</b></p><p><b>end for</b></p><p><b>end if</b></p><p><b>end for</b></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Path = tmp$\n</tex-math></inline-formula></p><p><b>end while</b></p><p><b>Return</b>: <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula></p><p><b>end function</b></p></div></p><p>IsFeasible() function (<a ref-type=\"algorithm\" anchor=\"alg5\" class=\"fulltext-link\">Algorithm 5</a>) checks the required number of slots <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta ^{r}|$\n</tex-math></inline-formula> at each node, if available, then passes the information to the adjacent nodes for route discovery further. Else, the path with slots <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\leq |\\Delta ^{r}|$\n</tex-math></inline-formula> is discarded from the list. The search is stopped when the destination node is found for one of the paths (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k =1$\n</tex-math></inline-formula>). Then, <a ref-type=\"algorithm\" anchor=\"alg3\" class=\"fulltext-link\">Algorithm 3</a> checks the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula>. If it is not empty, then that path is used for RSA. Whereas, if the path is not found, then that lightpath request gets blocked.<div class=\"algorithm\" id=\"alg5\"><h4>Algorithm 5 IsFeasible()</h4><p>function IsFeasible(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(\\Delta _{a}, |\\Delta _{b}|)$\n</tex-math></inline-formula>) % IsFeasible function checks the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{b}|$\n</tex-math></inline-formula> number of contiguous slots are available in the bitmap <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{a}$\n</tex-math></inline-formula></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$|\\Delta _{b}|$\n</tex-math></inline-formula> can be accommodated in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Delta _{a}$\n</tex-math></inline-formula> <b>then</b></p><p><b>Return</b> True</p><p><b>else</b></p><p><b>Return</b> False</p><p><b>end if</b></p><p><b>end function</b></p></div></p><p>This way of routing is best suited for single path routing i.e. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k =1$\n</tex-math></inline-formula>.</p></div><div class=\"section_2\" id=\"sec4c3\"><h4>3) Type III: Routing and Spectrum Assignment Based on Required Consecutive Slots and Shortest Path</h4><p>The <a ref-type=\"algorithm\" anchor=\"alg6\" class=\"fulltext-link\">Algorithm 6</a> is Type III Routing and Spectrum Assignment based on Consecutive Slots with additional Shortest Path Constraint. The method for computing path is same as used for Type II Algorithm except now instead of single path, multiple candidate paths are maintained from the source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula> to destination <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> using CandidatePaths function (<a ref-type=\"algorithm\" anchor=\"alg4\" class=\"fulltext-link\">Algorithm 4</a>). In this function, the search for the candidate path originates from the source node <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s$\n</tex-math></inline-formula>. Then for each iteration, the number of hops for each path in the list keeps on incrementing. Also, the paths with maximum contiguous slots <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\leq |\\Delta ^{r}|$\n</tex-math></inline-formula> are discarded during the search. The search is stopped when the destination node is found for at most <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> paths. Based on the distance, the shortest path from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> is chosen for Routing and Spectrum Assignment. If the path is not found, then the lightpath request gets blocked.<div class=\"algorithm\" id=\"alg6\"><h4>Algorithm 6 Type III: RSACSSP</h4><p><b>Input:</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, |\\Delta ^{r}|, k)$\n</tex-math></inline-formula></p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath \\leftarrow $\n</tex-math></inline-formula> list of candidate paths from s to d using CandidatePaths(<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$G(V, E, \\{ \\Delta _{e} \\})$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$LR(s, d, | \\Delta ^{r} |, k)$\n</tex-math></inline-formula>) % <a ref-type=\"algorithm\" anchor=\"alg4\" class=\"fulltext-link\">Algorithm 4</a></p><p><b>if</b> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> is not empty <b>then</b></p><p><b>for</b> all the candidate paths in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> indexed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i$\n</tex-math></inline-formula> <b>do</b></p><p>Select the shortest path (distance in km) from all paths listed in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$AllPath$\n</tex-math></inline-formula> and store in <i>BestPath</i></p><p><b>Return</b> <i>BestPath</i></p><p><b>end for</b></p><p><b>else</b></p><p>The request is marked blocked.</p><p><b>end if</b></p></div></p><p>This method is the reverse process of finding k-shortest path first and then finding one with the required contiguous slots. Here we find path with required slots, and then choose the shortest one among them. This is also used for single path routing if the value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> is 1.</p></div></div></div>\n<div class=\"section\" id=\"sec5\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION V.</div><h2>Numerical Results</h2></div><p>The <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-sp) algorithm finds the route on the basis of the path containing least number of hops or shortest distance (km or miles). After that it checks whether the required slots are available or not on the found paths. This method might require extra computation. Therefore, we proposed algorithms in which the routes are found on the basis of contiguous and continuous spectrum slots availability. The performance of the proposed algorithms is compared with the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path algorithm and shortest path algorithm.</p><div class=\"section_2\" id=\"sec5a\"><h3>A. Network Settings</h3><p>To evaluate the efficacy of our proposed algorithms, we operated a set of simulation experiments using MATLAB R2019b. The simulations are done for 2,00,000 requests for multiple iterations. The performance of proposed algorithms - Type I: RSACS, Type II: RSACS and Type III: RSACSSP in Flexigrid Optical Networks, are evaluated on the 14-nodes 22-links NSFNET with an average nodal degree (nodal degree, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$n_{d} = \\dfrac {2E}{V}$\n</tex-math></inline-formula>) 3.0, and 24 nodes 42 links USNET with an average nodal degree 3.5 as shown in <a ref-type=\"fig\" anchor=\"fig4\" class=\"fulltext-link\">Figure 4</a>. We assume the fiber bandwidth in the frequency range of C-band to be 4 THz on each link of the network. Using O-OFDM technology, the whole bandwidth is divided into 12.5 GHz parallel channels. Therefore, there are 320 spectrum slots on each link of the network, calculated using <a ref-type=\"disp-formula\" anchor=\"deqn1\" href=\"#deqn1\" class=\"fulltext-link\">eq. 1</a>. The traffic demands for all the lightpath requests on each node pair are uniformly distributed. The bandwidth required for each lightpath is chosen randomly between 1 and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B$\n</tex-math></inline-formula>, where different <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B$\n</tex-math></inline-formula> values are used as a parameter in simulations. In this paper, the values of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$B$\n</tex-math></inline-formula> are 100 Gbps (8 spectrum slots, if the grid size is 12.5 GHz) and 200 Gbps (16 spectrum slots, if the grid size is 12.5 GHz). For spectrum allocation, we also considered an additional guard band (GB). The size of GB is considered to be 10 GHz.\n<div class=\"figure figure-full\" id=\"fig4\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan4-3227438-large.gif\" data-fig-id=\"fig4\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan4-3227438-small.gif\" alt=\"FIGURE 4. - Networks topologies used.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 4. </b><fig><p>Networks topologies used.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p><p>The use of static traffic for simulation does not show the effectiveness of the proposed algorithms. Hence, lightpath requests were generated dynamically, i.e., we considered dynamic traffic scenario. The incoming lightpaths can be set up and released upon request. These are equivalent to setting up and releasing circuits in circuit-switched networks. The incoming lightpath requests arrive with an exponentially distributed inter-arrival time with the average of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\dfrac {1}{\\lambda }$\n</tex-math></inline-formula> seconds. Each connection is maintained for exponentially distributed holding time with average of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\dfrac {1}{\\mu }$\n</tex-math></inline-formula> seconds before being released. The offered load (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\rho $\n</tex-math></inline-formula>) in Erlang (E) is given by <disp-formula id=\"deqn5\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\rho = \\dfrac {\\dfrac {1}{\\mu }}{\\dfrac {1}{\\lambda }} = \\dfrac {\\lambda }{\\mu }.\\tag{5}\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\rho = \\dfrac {\\dfrac {1}{\\mu }}{\\dfrac {1}{\\lambda }} = \\dfrac {\\lambda }{\\mu }.\\tag{5}\\end{equation*}\n</span></span></disp-formula> The values of offered load per node (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\rho $\n</tex-math></inline-formula>) between 2 to 30 Erlangs have been considered.</p><p>The pathfinding in the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-sp) algorithm depends on the number of shortest paths (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>) considered using distance first, and then the availability of the spectrum slots. On the other hand, the pathfinding in our proposed algorithms gives priority to the availability of the spectrum slots before the length of the path. The value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> chosen for pathfinding is taken as 10 for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-sp, Type I and Type III algorithms. As already discussed in pseudocodes, the shortest path and Type II algorithms are independent of the value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>. The performance parameters are estimated based on the observations made during the steady-state condition (which is observed to happen after approximately three times the average holding time, i.e., <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$3 \\times \\dfrac {1}{\\mu }$\n</tex-math></inline-formula>). All the plot results are within 95% confidence interval over multiple iterations.</p></div><div class=\"section_2\" id=\"sec5b\"><h3>B. Performance Metrics</h3><p>The performance of the proposed algorithms is evaluated on the basis of blocking probability of the new incoming requests, blocking probability of the required slots by those blocked requests, and the spectrum utilization with the gradual increments in demand rate (in Gbps):\n<ul style=\"list-style-type:disc\"><li><p><b>Blocking Probability:</b> It is defined as the ratio of total number of blocked connections to the total number of arrived connections.</p></li><li><p><b>Bandwidth Blocking Probability:</b> It is defined as the ratio of the total amount of incoming bandwidth or slots which are blocked, to the total amount of bandwidth or slots required by all the incoming connections.</p></li><li><p><b>Spectrum Utilization:</b> The average ratio of total used bandwidth (or slots) to the total bandwidth (or slots) in the spectrum when observed for a time period.</p></li></ul></p></div><div class=\"section_2\" id=\"sec5c\"><h3>C. Without Distance-Adaptive Modulation Techniques</h3><p>In this section, for <a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">figures 5</a> through <a ref-type=\"fig\" anchor=\"fig6\" class=\"fulltext-link\"/> <a ref-type=\"fig\" anchor=\"fig7\" class=\"fulltext-link\">7</a>, we evaluate the performance of the proposed algorithms, considering BPSK modulation format i.e., <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m = 1$\n</tex-math></inline-formula>, for all source-destination pairs.\n<div class=\"figure figure-full\" id=\"fig5\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan5-3227438-large.gif\" data-fig-id=\"fig5\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan5-3227438-small.gif\" alt=\"FIGURE 5. - Various performance metric vs offered loads for NSFNET with a demand rate of 100 Gbps.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 5. </b><fig><p>Various performance metric vs offered loads for NSFNET with a demand rate of 100 Gbps.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div>\n<div class=\"figure figure-full\" id=\"fig6\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan6-3227438-large.gif\" data-fig-id=\"fig6\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan6-3227438-small.gif\" alt=\"FIGURE 6. - Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 6. </b><fig><p>Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div>\n<div class=\"figure figure-full\" id=\"fig7\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan7-3227438-large.gif\" data-fig-id=\"fig7\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan7-3227438-small.gif\" alt=\"FIGURE 7. - Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 7. </b><fig><p>Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p><p>The <a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">Figures 5a</a> and <a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">5b</a> are the plots of the blocking probability and bandwidth blocking probability of six pathfinding techniques with first-fit spectrum allocation policy. Intuitively, as the value of the offered load increases, (increasing the average arrival rate but keeping average holding time as constant) the blocking probability increases. The performance of consecutive slots-based pathfinding algorithms is better than the shortest path algorithms. Additionally, for low loads, Type II algorithm outperform other algorithms. Also, the Type III and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path algorithms are almost same after the normalized offered load of 0.6. But in Type III, the adaptive parameter is used first and then static parameter for routing. The performance of the Type III algorithm is better than the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path algorithm for lower loads. Intuitively, the shortest path algorithm finds a single route from source to destination based on the distance, not the spectrum slots available. Therefore, if the spectrum slots are not available at the time of spectrum assignment, then the connection request gets blocked. In shortest path case, other paths between source and destination might have required spectrum slots; but they are not used for the current connection request. Type-III algorithm takes all the possibilities in consideration and hence, performs better than the other algorithms in NSFNET.</p><p>The Type II algorithm finds the path based on required spectrum slots only. The path gets blocked at the routing time if no path is available with the required spectrum slots. In this, all the possible links with required spectrum slots are checked until the destination node is found. Therefore, the Type-II algorithm\u2019s time complexity for the worst case scenario is higher than the shortest path algorithm, as given in <a ref-type=\"table\" anchor=\"table2\" class=\"fulltext-link\">Table 2</a>. Type II and shortest path algorithms are independent of the value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>. However, the performance of Type II is far better than the shortest path for all load conditions.<div class=\"figure figure-full table\" id=\"table2\"><div class=\"figcaption\"><b class=\"title\">TABLE 2 </b>\nComparison of Algorithms Used for Routing and Spectrum Assignment. Here, V is the Set of Vertices, E is the Set of Edges, \n$\\Delta$\n is the Set of Spectrum Slots, and \n$k$\n is the Maximum Number of Paths to be Computed by RSA</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan.t2-3227438-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan.t2-3227438-small.gif\" alt=\"Table 2- &#10;Comparison of Algorithms Used for Routing and Spectrum Assignment. Here, V is the Set of Vertices, E is the Set of Edges, &#10;$\\Delta$&#10; is the Set of Spectrum Slots, and &#10;$k$&#10; is the Maximum Number of Paths to be Computed by RSA\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p><a ref-type=\"fig\" anchor=\"fig5\" class=\"fulltext-link\">Figure 5c</a> compares the performance in terms of spectrum utilization. The blocking probability of the connections for lower loads is almost negligible. Hence, the spectrum remains mostly underutilized. But as the offered load values increase, spectrum utilization also increases for all the algorithms and the shortest path algorithms for higher loads. Based on the observations, higher blocking of connections and lower spectrum utilization for the shortest path is due to the unavailability of the contiguous spectrum slots in a fragmented state. In contrast, for other cases where blocking probability is low, and spectrum utilization is high, we can say that the fragmentation is less impactful.</p><p><a ref-type=\"fig\" anchor=\"fig6\" class=\"fulltext-link\">Figures 6a</a>, <a ref-type=\"fig\" anchor=\"fig6\" class=\"fulltext-link\">6b</a> and <a ref-type=\"fig\" anchor=\"fig6\" class=\"fulltext-link\">6c</a> are also for NSFNET network with the value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> as 10 but the maximum incoming demand rate is 200 Gbps. For higher demand rates, the blocking probability keeps increasing as the availability of required spectrum slots becomes less than that for the case of 100 Gbps. The blocking performance comparison is similar to that for the demand rate of 100 Gbps. The spectrum performance is also similar, i.e. the spectrum utilization of the shortest path algorithms is worst as the offered load per node increases. Whereas, other four algorithms\u2019 spectrum utilization performance is almost same. We can notice the spectrum utilization performance affected by fragmentation at offered load around 30%.</p><p>Alongside NSFNET, we used USNET network to determine the performance trends with topology change. <a ref-type=\"fig\" anchor=\"fig7\" class=\"fulltext-link\">Figures 7a</a>, <a ref-type=\"fig\" anchor=\"fig7\" class=\"fulltext-link\">7b</a> and <a ref-type=\"fig\" anchor=\"fig7\" class=\"fulltext-link\">7c</a> are for USNET network where the value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> is 10 and the incoming demand rate is 100 Gbps. This observation is for large networks with 24 nodes and 43 links. The blocking performance of the lightpath requests and spectrum slots changes as compared to NSFNET. In USNET also the Type II and Type III algorithm outperforms the other strategies. In USNET again the shortest path algorithms perform worst in terms of blocking probability and utilization of the spectrum slots.</p><p>Now, as the network diameter changes, we can also observe the change in performance of the spectrum slots utilization for the other four algorithms. Type II and Type III have the higher spectrum utilization for the higher offered loads than Type I and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path algorithm, due to acceptance of more connection requests having higher incoming demand rates.</p></div><div class=\"section_2\" id=\"sec5d\"><h3>D. With Distance-Adaptive Modulation Techniques</h3><p>The performance evaluation of various proposed and baseline algorithms using distance adaption modulation techniques <a ref-type=\"bibr\" anchor=\"ref28\" id=\"context_ref_28_5d\">[28]</a> is shown in <a ref-type=\"fig\" anchor=\"fig8\" class=\"fulltext-link\">figures 8a</a> through <a ref-type=\"fig\" anchor=\"fig9\" class=\"fulltext-link\"/><a ref-type=\"fig\" anchor=\"fig10\" class=\"fulltext-link\">10c</a>. Also, the proposed algorithm changes from Routing and Spectrum Assignment based on Consecutive Slots (RSACS) to Routing, Modulation, and Spectrum Assignment based on Consecutive Slots (RMSACS). Intuitively, RMSACS should perform better in all aspects as compared to RSACS and this is also observed in the simulation results.\n<div class=\"figure figure-full\" id=\"fig8\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan8-3227438-large.gif\" data-fig-id=\"fig8\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan8-3227438-small.gif\" alt=\"FIGURE 8. - Various performance metric vs offered loads for NSFNET with a demand rate of 100 Gbps. Considering distance-adaptive modulation techniques.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 8. </b><fig><p>Various performance metric vs offered loads for NSFNET with a demand rate of 100 Gbps. Considering distance-adaptive modulation techniques.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div>\n<div class=\"figure figure-full\" id=\"fig9\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan9-3227438-large.gif\" data-fig-id=\"fig9\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan9-3227438-small.gif\" alt=\"FIGURE 9. - Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps. Considering distance-adaptive modulation techniques.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 9. </b><fig><p>Various performance metric vs offered loads for NSFNET with a demand rate of 200 Gbps. Considering distance-adaptive modulation techniques.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div>\n<div class=\"figure figure-full\" id=\"fig10\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan10-3227438-large.gif\" data-fig-id=\"fig10\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9973309/lohan10-3227438-small.gif\" alt=\"FIGURE 10. - Various performance metric vs offered loads for USNET with a demand rate of 100 Gbps. Considering distance-adaptive modulation techniques.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 10. </b><fig><p>Various performance metric vs offered loads for USNET with a demand rate of 100 Gbps. Considering distance-adaptive modulation techniques.</p></fig></div><p class=\"links\"><a href=\"/document/9973309/all-figures\" class=\"all\">Show All</a></p></div></p><p>The <a ref-type=\"fig\" anchor=\"fig8\" class=\"fulltext-link\">figures 8a</a> and <a ref-type=\"fig\" anchor=\"fig8\" class=\"fulltext-link\">8b</a> are plots of the blocking probability and bandwidth blocking probability of the algorithms for NSFNET with demand rate of 100Gbps. Here, we are using distance adaptive modulation and first-fit spectrum allocation techniques. From figures, we can see the performance of the proposed RMSACS algorithms is better than the traditional algorithms (also using distance adaptive modulation techniques). Additionally, for lower loads Type I: RMSACS outperforms other algorithms. As the load increases, the performance of all the algorithms converges towards almost same blocking probability values.</p><p><a ref-type=\"fig\" anchor=\"fig8\" class=\"fulltext-link\">Figure 8c</a> compares the performance of the proposed algorithms in terms of spectrum utilization. The blocking probability of the connections for lower loads is almost negligible. Hence, again the spectrum remains underutilized. But as the offered load values increase, spectrum utilization also increases for all the algorithms and the shortest path algorithms for higher loads. We again observed that higher blocking of connections and lower spectrum utilization for the shortest path is due to the unavailability of the contiguous spectrum slots in a fragmented state.</p><p><a ref-type=\"fig\" anchor=\"fig9\" class=\"fulltext-link\">Figures 9a</a>, <a ref-type=\"fig\" anchor=\"fig9\" class=\"fulltext-link\">9b</a> and <a ref-type=\"fig\" anchor=\"fig9\" class=\"fulltext-link\">9c</a> are also for NSFNET with the maximum demand rate of 200 Gbps. For higher demand rates, the early impact on connection blocking can be seen at lower loads, as the availability of required spectrum slots becomes less than that for the case of 100 Gbps. The connection blocking and bandwidth blocking comparison is similar to that for the demand rate of 100 Gbps. The spectrum performance is also similar, i.e. the spectrum utilization of the shortest path algorithms is worst as the offered load per node increases. Whereas, for other four algorithms\u2019, spectrum utilization performance is almost same.</p><p>We have also used USNET network to determine the performance trends with topology change. <a ref-type=\"fig\" anchor=\"fig10\" class=\"fulltext-link\">Figures 10a</a>, <a ref-type=\"fig\" anchor=\"fig10\" class=\"fulltext-link\">10b</a> and <a ref-type=\"fig\" anchor=\"fig10\" class=\"fulltext-link\">10c</a> are for USNET network where the value of the incoming demand rate is 100 Gbps. The blocking performance of the lightpath requests and spectrum slots changes as compared to NSFNET. In USNET, the Type II and Type III algorithm outperforms the other strategies. Here, again the shortest path algorithms perform worst in terms of blocking probability and utilization of the spectrum slots. When the network diameter changes, Type II and Type III have the higher spectrum utilization for the higher offered loads than Type I and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path.</p><p>Another set of observations are presented in <a ref-type=\"table\" anchor=\"table2\" class=\"fulltext-link\">Table 2</a>. The time complexity for the worst-case scenario is lowest for Shortest Path. Whereas time complexity for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-Shortest Path and Type II are comparable depending upon the value of k. Because if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k =1$\n</tex-math></inline-formula>, then the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path converges to the shortest path. However, if the value of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula> is too high, then time complexity keeps worsening. Even higher than Type II. Therefore, the time complexity for the worst-case scenario is in the following order Shortest Path <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$ &lt; k$\n</tex-math></inline-formula>-Shortest Path, Type II &lt; Type I, Type III.</p><p>The Type II algorithm has better performance in blocking probability, spectrum utilization and time complexity for the worst-case scenario. Also, we know a priori blocking, i.e., at the routing time, so there is no need for spectrum assignment in this algorithm. Therefore, it can be used to lower the blocking of the lightpath requests. However, eliminating fragmentation is impossible; therefore, one can use the de-fragmentation strategy in addition to Type II algorithm, instead with the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$k$\n</tex-math></inline-formula>-shortest path such that the traffic is disrupted fewer times.</p></div></div>\n<div class=\"section\" id=\"sec6\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION VI.</div><h2>Conclusion</h2></div><p>The Routing and Spectrum Assignment is a tedious process in Flexible grid Optical Networks. The main reason is dynamic arrivals and departures of the lightpath requests and contiguity constraint in lightpath setup, resulting in fragmentation within the spectrum of the network. In this paper, instead of using static parameters for RSA, we used adaptive parameters, i.e., available consecutive spectrum slots for routing. The consecutive spectrum slots keep changing with the network conditions. We performed the detailed analysis under different demand rates for NSFNET and USNET. The performance of the proposed algorithms is better than the existing strategies in terms of lower blocking of the lightpath requests. One of the reasons is the lower fragmentation of the spectrum slots. We also performed a detailed analysis of the proposed algorithms using distance-adaptive modulation formats. The Type II algorithm has lower blocking probability, higher spectrum utilization and lower time complexity.</p><p>In this work, we did not consider the fragmentation metric for RSA. We can further design fragmentation-aware joint RSA algorithms and compare their performance with the proposed fragmentation-aware k-shortest path algorithm. Another work that we can extend is the use of the multipath routing concept as discussed in section V-C.1.</p></div>\n</div></div></response>\n"
}