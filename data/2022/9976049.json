{
    "abstract": "In this work we develop a rewarding framework that can be used to enhance existing crowd-sensing applications. Although a core requirement of such systems is user engagement, people may be reluctant to participate because sensitive information about them may be leaked or inferred from submitted data. The use of monetary rewards can help incentivize participation, thereby increasing not only the am...",
    "articleNumber": "9976049",
    "articleTitle": "Incentivizing Participation in Crowd-Sensing Applications Through Fair and Private Bitcoin Rewards",
    "authors": [
        {
            "preferredName": "Tassos Dimitriou",
            "normalizedName": "T. Dimitriou",
            "firstName": "Tassos",
            "lastName": "Dimitriou",
            "searchablePreferredName": "Tassos Dimitriou"
        },
        {
            "preferredName": "Antonis Michalas",
            "normalizedName": "A. Michalas",
            "firstName": "Antonis",
            "lastName": "Michalas",
            "searchablePreferredName": "Antonis Michalas"
        }
    ],
    "doi": "10.1109/ACCESS.2022.3227633",
    "publicationTitle": "IEEE Access",
    "publicationYear": "2022",
    "publicationVolume": null,
    "publicationIssue": null,
    "volume": "10",
    "issue": null,
    "documentLink": "/document/9976049/",
    "xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response><accessType>CCBY - IEEE is not the copyright holder of this material. Please follow the instructions via https://creativecommons.org/licenses/by/4.0/ to obtain full-text articles and stipulations in the API documentation.</accessType><div id=\"BodyWrapper\" class=\"ArticlePage\" xmlns:ieee=\"http://www.ieeexplore.ieee.org\"><div id=\"article\">\n<div class=\"section\" id=\"sec1\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION I.</div><h2>Introduction</h2></div><p>Advances in sensing and networking have given rise to a new sensing paradigm called participatory or mobile crowd-sensing in which participants use their sensor-enabled devices to gather data of unprecedented quality and quantity about their immediate surroundings, leading to innovative applications such as intelligent transportation, environmental monitoring and urban sensing, assistive healthcare, and so on <a ref-type=\"bibr\" anchor=\"ref1\" id=\"context_ref_1_1\">[1]</a>.</p><p>In such crowd-sensing applications, the service provider administers the data sharing infrastructure and recruits the people (and their devices) to gather data for the advertised sensing tasks. The collected data are then analyzed and made available to the users or the broader public. It is this lack of a fixed sensing infrastructure and the ubiquitousness of WiFi and mobile Internet connectivity that gives crowd-sensing its unique advantage over traditional sensing paradigms.</p><p>From the viewpoint of the service providers, the key factor to the success of crowdsensing is user participation. However, collecting information from user devices has important privacy implications since contributed data may be strongly related to user activities and daily routines <a ref-type=\"bibr\" anchor=\"ref2\" id=\"context_ref_2_1\">[2]</a>. For example, sensed data may include visited locations or even personal data such as photos and videos. This in turn may have a negative impact on participation as users may be reluctant to endanger their personal lives without immediate benefits <a ref-type=\"bibr\" anchor=\"ref3\" id=\"context_ref_3_1\">[3]</a>. To this effect, monetary incentives could help attract a larger number of participants, thereby increasing the amount and the quality of sensed data. Hence incentivizing users by means of <i>rewards</i> can be the only way to motivate user engagement and improve the quality of collected information.</p><p>The problem of incentivizing user participation has been studied in the literature (see <a ref-type=\"bibr\" anchor=\"ref4\" id=\"context_ref_4_1\">[4]</a> for a survey), however new design challenges arise regarding accountability and fairness. Accountability is important for two main reasons: First, only authenticated users should benefit from using the rewarding system. Second, malicious users should be prevented from abusing the system, for example by trying to obtain multiple rewards for the same data. Accountability, however, seems to contradict the desire for privacy; if user identities are not protected, task submissions and other contextual information like location data and participation history may result in serious privacy breaches.</p><p>Another important issue that has not been addressed adequately by prior research in the context of crowd-sensing is <i>fairness</i>. A malicious provider, for example, may refuse to pay the user after getting the data, even if this might hurt its reputation. On the other hand, if the provider pays first, nothing stops a user from \u201ctaking the money and run\u201d, without releasing any sensed data. Thus, in the absence of a centralized authority that monitors the exchange of money-for-data and is responsible for resolving any conflicts that may arise due to failures or fraud, both parties can cheat the other. We address this problem by relying on the Blockchain network, thus eliminating the need for a trustworthy entity required in fair exchange protocols <a ref-type=\"bibr\" anchor=\"ref5\" id=\"context_ref_5_1\">[5]</a>, <a ref-type=\"bibr\" anchor=\"ref6\" id=\"context_ref_6_1\">[6]</a>.</p><p><i>Contributions</i>: In this work,<a ref-type=\"fn\" anchor=\"fn1\" class=\"footnote-link\">1</a> we propose a rewarding framework that can be used to trade crowd-sensing data for bitcoins. We use the blockchain to safeguard the fairness of the exchange and we place no trust on the service provider or other third parties. Additionally, we rely on simple blockchain transactions as opposed to prior works that utilize the blockchain network to exchange the sensed data in addition to the rewards. This greatly reduces cost and enhances the efficiency of our protocol.</p><p>Our work is complementary to all approaches that aim at enhancing privacy when users report data and expect a reward. This is the case of crowd-sensing applications; every time sensed data has to be reported, our protocol ensures that a payment can be made to an ephemeral bitcoin address.</p><p>We have studied the privacy and security properties of our scheme and have proved that the rewarding framework is indeed privacy-friendly.</p><p>In summary, we make the following contributions:\n<ul style=\"list-style-type:disc\"><li><p>We develop a rewarding framework that can be easily integrated in existing crowd-sensing applications.</p></li><li><p>Our protocol exhibits strong fairness since data is delivered <i>if and only if</i> an appropriate payment is received.</p></li><li><p>The use of the blockchain helps eliminate trust in traditional fair-exchange protocols. Participants have a single view of transactions and the system is publicly verifiable, hence no trust is placed on any third party.</p></li><li><p>Our system relies on simple blockchain transactions, hence increasing efficiency and reducing cost. Additionally, the core steps of the protocol take place <i>offchain</i>. For completeness, we have implemented our protocol both in the Bitcoin and Ethereum blockchains, demonstrating the practicality of our approach.</p></li><li><p>We use succinct zero-knowledge proofs (<i>zkSNARKs</i>) to ensure not only anonymity but also the well-formedness and efficiency of the various operations.</p></li><li><p>We formally argue about the security and privacy aspects of the proposal. Malicious providers cannot identify users nor link protocol operations. Additionally, malicious users cannot issue/forge rewards, nor they can claim more than one reward for the same data.</p></li></ul></p><p><i>Organization</i>: In the next section, we review related work in the context of crowd-sensing. In <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>, we present the system and threat model, and define the properties we expect from a secure data rewarding system. <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Section IV</a> highlights the cryptographic tools used in our proposal while details of our protocol are presented in <a ref-type=\"sec\" anchor=\"sec5\" class=\"fulltext-link\">Section V</a>. The protocol\u2019s security and implementation aspects are discussed in <a ref-type=\"sec\" anchor=\"sec6\" class=\"fulltext-link\">Sections VI</a> and <a ref-type=\"sec\" anchor=\"sec7\" class=\"fulltext-link\">VII</a>, respectively. Finally, <a ref-type=\"sec\" anchor=\"sec8\" class=\"fulltext-link\">Section VIII</a> concludes the paper.</p></div>\n<div class=\"section\" id=\"sec2\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION II.</div><h2>Related Work</h2></div><p>A number of works in the literature use the blockchain to exchange data and rewards. Tanas et al. <a ref-type=\"bibr\" anchor=\"ref8\" id=\"context_ref_8_2\">[8]</a> developed a framework that focuses mostly on the anonymity of payments since user data are sent in the clear to the data collector who must first perform a validation test on the data before payment. This may compromise fairness as a malicious collector may refuse to reward users once data are sent. A similar solution is proposed by Chen and Xue <a ref-type=\"bibr\" anchor=\"ref9\" id=\"context_ref_9_2\">[9]</a> in which a blockchain is used to record the exchange of data among participants. Feng and Yan <a ref-type=\"bibr\" anchor=\"ref10\" id=\"context_ref_10_2\">[10]</a> developed a blockchain-based crowd-sensing system, named MCS-Chain, to achieve decentralized trust management. However, none of these works has a focus on privacy.</p><p>CrowdBC <a ref-type=\"bibr\" anchor=\"ref11\" id=\"context_ref_11_2\">[11]</a> is a smart contract based solution which can be used by a requester to solicit a number of workers to solve a particular task. However, the system is neither private nor anonymous since the collected data and the user identities can leak to the blockchain network. In particular, as miners in CrowdBC collect and evaluate user data, they can collude with the collector and learn confidential data as well as affect fairness.</p><p>Lu et al. <a ref-type=\"bibr\" anchor=\"ref12\" id=\"context_ref_12_2\">[12]</a> developed ZebraLancer, a system similar to CrowdBC that tries to overcome data leakage and identity breach. The smart contract handles both worker submissions and payments by the collector, preventing dishonest behavior by either party. However, in the case of a cheating collector, the smart contract will distribute the budget evenly among users thus violating fairness since some users may have contributed more than others. Furthermore, as all information (both user data and payments) goes through the smart contract this essentially turns the system into a centralized one.</p><p>The work of Duan et al. <a ref-type=\"bibr\" anchor=\"ref13\" id=\"context_ref_13_2\">[13]</a> is also based on smart contracts bearing monetary rewards along with hardware-assisted transparent enclaves to ensure correctness of data aggregation and sanitization of data. The system consists of consumers who post the sensing tasks as a smart contract, workers who send the data to the contract, and providers who perform data sanitization. Unfortunately, the threat model is very limited as the authors assume that data consumers and the service provider do not collude with each other since otherwise data confidentiality and user privacy is lost. The work of Dai et al. <a ref-type=\"bibr\" anchor=\"ref14\" id=\"context_ref_14_2\">[14]</a> also relied on the combination of smart contracts and secure hardware to develop a data trading ecosystem. However, recent works have shown that secure hardware can be compromised <a ref-type=\"bibr\" anchor=\"ref15\" id=\"context_ref_15_2\">[15]</a>.</p><p>A characteristic of all smart contract-based solutions is that all data go through the smart contract, resulting in rather inefficient systems. FairSwap <a ref-type=\"bibr\" anchor=\"ref16\" id=\"context_ref_16_2\">[16]</a> attempts to overcome this issue by producing small proofs of misbehavior in case of a cheating user. When this happens, the smart contract penalizes the user, hence it plays the role of a TTP running on top of the blockchain. However, smart contract transactions induce direct monetary costs to the collector, thus affecting their practicality in large scale solutions. Our work overcomes these issues by having most of the protocol steps taking place <i>offchain</i>. Only the actual payment transaction uses the blockchain network, thus making the system highly efficient. Additionally, we do not rely on the blockchain network or the miners to store and verify data submissions as in past works. Doing so paves the way to <i>collusion</i> attacks in which malicious miners can collaborate with the collector to steal data or compromise user privacy.</p><p>A recent work that avoids the use of smart contracts is <a ref-type=\"bibr\" anchor=\"ref17\" id=\"context_ref_17_2\">[17]</a>. While the authors use rather simple blockchain transactions, both the workers and the collector have to go through many rounds of submissions in the blockchain, seriously affecting the efficiency of the protocol. More importantly, the worker IDs are visible and the collector obtains the data before the actual rewarding phase, thus violating anonymity and fairness. Wang et al. <a ref-type=\"bibr\" anchor=\"ref18\" id=\"context_ref_18_2\">[18]</a> proposed another incentive mechanism to reward users. Miners first verify the quality of the sensed data conforming to assessment criteria published by the server, then reward the users accordingly. However, since the miners get the data first, a malicious miner may forward these to the server thus undermining the fairness of the process. Finally, Delgado-Segura et al. <a ref-type=\"bibr\" anchor=\"ref19\" id=\"context_ref_19_2\">[19]</a> describe a protocol for fair data trading. However, fairness is only probabilistically enforced and the actual protocol follows a cut and choose approach: in order to convince the buyer that the required data is correct, a portion of it has to be revealed first. This increases the communication overhead of the protocol. Additionally, there is no way for the buyer to be sure about the utility of the data beforehand. Both issues are taken care by our protocol. A comparison of the most relevant works with emphasis on privacy and fairness can be found in <a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">Table 1</a>.<div class=\"figure figure-full table\" id=\"table1\"><div class=\"figcaption\"><b class=\"title\">TABLE 1 </b>\nComparison With Existing Protocols</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t1-3227633-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t1-3227633-small.gif\" alt=\"Table 1- &#10;Comparison With Existing Protocols\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p>In this work, the blockchain will be used to ensure the fair exchange between submitted data and respective rewards, eliminating the possibility of cheating by any party. Previous works on fairness using blockchain focus on fair purchase operations of a product. For example, Bentov and Kumaresan <a ref-type=\"bibr\" anchor=\"ref20\" id=\"context_ref_20_2\">[20]</a> use Bitcoin to enforce proper behavior of participants by means of a penalty mechanism, while Heilman et al. <a ref-type=\"bibr\" anchor=\"ref21\" id=\"context_ref_21_2\">[21]</a> design an unlinkable payment hub that allows participants to make fast, anonymous, off-blockchain payments through an untrusted intermediary. Campanelli et al. <a ref-type=\"bibr\" anchor=\"ref22\" id=\"context_ref_22_2\">[22]</a> achieve strong fairness for the case where a seller wants to be paid after proving that a service has been rendered, as opposed to selling a secret in Zero Knowledge contingent payments <a ref-type=\"bibr\" anchor=\"ref23\" id=\"context_ref_23_2\">[23]</a>. Our work is similar to those in the sense that the \u201csecret\u201d to be sold is the user data. However, care has to be taken to ensure that only authenticated users can benefit from the existence of rewards.</p><p>For token-based mechanisms that do not use the blockchain to reward users, the reader is referred to <a ref-type=\"bibr\" anchor=\"ref24\" id=\"context_ref_24_2\">[24]</a> and <a ref-type=\"bibr\" anchor=\"ref25\" id=\"context_ref_25_2\">[25]</a> and the references therein.</p></div>\n<div class=\"section\" id=\"sec3\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION III.</div><h2>System Model</h2></div><p>Our base architecture consists mainly of two entities: <i>users</i> that participate in sensing tasks and a <i>service provider</i> that collects data and rewards users for the data they provide. Users install sensing applications in their mobile devices and gather sensor readings which might include location, accelerometer data, pictures, sound samples, environmental data like temperature and pollution levels, and so on. Once they have data to report, they contact the application server which collects the results and organizes them in appropriate form for display to the general public or locally to the user devices.</p><p>A snapshot of this architecture is shown in <a ref-type=\"fig\" anchor=\"fig1\" class=\"fulltext-link\">Figure 1</a>. Users <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> transmit their sensed data to the service provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> who defines the scope of the data collection campaign. The registration authority (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {RA}$\n</tex-math></inline-formula>) is responsible for registering and authorizing user participation (Step 1). The task server (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {TS}$\n</tex-math></inline-formula>) defines the sensing tasks, advertises those to the users and defines the rewards for the contributions they make. Typically, these entities are part of the back-end infrastructure that supports the sensing process, starting with task definition, user registration and collection of sensing data, to final reporting and dissemination of results. Here, however, we will not distinguish between these entities as is customary in participatory sensing applications <a ref-type=\"bibr\" anchor=\"ref2\" id=\"context_ref_2_3\">[2]</a> since these entities may collude with each other to recover user information. Hence from a security point of view we will treat them as one, and without loss of generality, we will assume that the user is in possession of an authentic task (Step 2) and moves to the target area (Step 3) to start collecting data.\n<div class=\"figure figure-full\" id=\"fig1\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit1-3227633-large.gif\" data-fig-id=\"fig1\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit1-3227633-small.gif\" alt=\"FIGURE 1. - System architecture.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 1. </b><fig><p>System architecture.</p></fig></div><p class=\"links\"><a href=\"/document/9976049/all-figures\" class=\"all\">Show All</a></p></div></p><p>Our protocol operations emphasize on Steps 4 and 5, where users collect bitcoin payments for submitted data. To prevent a malicious provider from refusing to pay, the sensed data are sent encrypted. The decryption key will be released only when the user obtains a payment. Thus, Step 5 relies on the Blockchain to ensure that data is delivered <i>if and only if</i> an appropriate payment is made. This guarantees that no party can cheat, thus ensuring fairness.</p><p>In addition to the above, the provider needs to be convinced that (i) data have been evaluated correctly according to some public valuation function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula> which produces a value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val={\\mathcal{ R}}(m)$\n</tex-math></inline-formula> equal to the utility of the data, and (ii) users cannot resubmit the same data again. This tension between accountability and anonymity is resolved in a methodical way, ensuring the privacy-respecting character of our protocol. Finally, we should note that with the exception of the key-for-money transaction, all protocol steps take place <i>offchain</i>. <a ref-type=\"table\" anchor=\"table2\" class=\"fulltext-link\">Table 2</a> summarizes the notation used throughout this work.<div class=\"figure figure-full table\" id=\"table2\"><div class=\"figcaption\"><b class=\"title\">TABLE 2 </b>\nKey Notation</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t2-3227633-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t2-3227633-small.gif\" alt=\"Table 2- &#10;Key Notation\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><div class=\"section_2\" id=\"sec3a\"><h3>A. Main Operations</h3><p>In the following we define the various operations expected from our system. For simplicity, only a high-level system interface is presented, not listing every possible input required to execute the protocols. These operations enable users to register, submit data, obtain awards, and so on.\n<ul style=\"list-style-type:disc\"><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Setup}(1^{\\kappa })$\n</tex-math></inline-formula> is an algorithm executed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> to setup the data reporting and payment system, where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\kappa $\n</tex-math></inline-formula> is the security parameter. The algorithm generates <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>\u2019s public and private key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ P}}, sk_{\\mathcal{ P}})$\n</tex-math></inline-formula> and the public parameters of the <i>zkSNARK</i> subsystem.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Register}(\\mathcal {U}, \\mathcal {P})$\n</tex-math></inline-formula> is executed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> generates a long term public/private key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> and then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> registers <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}$\n</tex-math></inline-formula> and other used identity information to prevent <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> from mounting double-redeeming attacks.</p><p>A second outcome of this protocol is an <i>ephemeral</i> key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}^{e}, sk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula>. The private key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> will be used by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to submit sensing data and sign bitcoin transactions. The public key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> (essentially a bitcoin address) will act as an <i>authorization</i> credential. Thus only authorized users can receive payments in a privacy-preserving manner. However, none of these keys can be linked to the long term public key of the user which is known to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {IdentDR}(taskID,{\\mathcal {DB}_{P}})$\n</tex-math></inline-formula> is executed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> to check if in its database <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {DB}_{P}$\n</tex-math></inline-formula> there exist two different submissions by the same user for a given task. This is to prevent <i>double-redemption</i> attempts in which users try to obtain more than one payments for the same sensing task.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Submit}({\\mathcal{ U, P}})$\n</tex-math></inline-formula> is executed between <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> first picks a symmetric key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> and encrypts the sensed data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C=E_{K}(m)$\n</tex-math></inline-formula>. Then, using an <i>anonymous</i> communication channel, it forwards <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> and the hash <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$H(K)$\n</tex-math></inline-formula> of the key to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> also creates a proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> that (i) demonstrates knowledge of the key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>, and (ii) that data in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> is worth <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins according to the rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula>. The data sent are also signed with the ephemeral signing key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> to produce a signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\sigma _{e}$\n</tex-math></inline-formula>.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Verify}({\\mathcal{ P}}, \\sigma _{e}, C,h_{K}, \\pi)$\n</tex-math></inline-formula>. This protocol is executed by the provider to check the validity of the signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\sigma _{e}$\n</tex-math></inline-formula> and the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>. The signature attests to the fact that the user is authorized. If the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> is also valid, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> posts a Bitcoin transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> to reward <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins to the user who presents the key that hashes to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{K}$\n</tex-math></inline-formula>. This operation also uses <i>IdentDR</i> to check for double-redemption attempts.</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Release}({\\mathcal{ U}}, K)$\n</tex-math></inline-formula>. This is executed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> once the user confirms that transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> has been posted on the blockchain network. The user posts a transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> that releases the key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> is signed with the private ephemeral key of the user to prevent <i>forwarding</i> attacks in the blockchain network.</p></li></ul></p><p><div class=\"section_2\" id=\"\"><h4>Definition 1 (Correctness):</h4><p>A rewarding scheme is called correct if for all system parameters <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula> and key material created by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Setup}(1^{k})$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Register}({\\mathcal U}$\n</tex-math></inline-formula>, and for honest <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula>, the following properties hold:\n<ul style=\"list-style-type:disc\"><li><p><i>Correctness of issuing and verifications</i>. When issued in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Register}$\n</tex-math></inline-formula> and used in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Submit}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Verify}$\n</tex-math></inline-formula>, ephemeral keys can be verified correctly.</p></li><li><p><i>Correctness of payment (fairness)</i>. All data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m$\n</tex-math></inline-formula> worth value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> under the rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula>, can be redeemed successfully under operations <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Submit}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Verify}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Release}$\n</tex-math></inline-formula>.</p></li></ul></p></div></p></div><div class=\"section_2\" id=\"sec3b\"><h3>B. Security and Privacy Model</h3><p>Our threat model includes malicious providers and users. Malicious providers may try to collect sensed data without rewarding users. Alternatively, they may try to link user actions; if it is possible to link a reward to a payment or to an initial registration step then it might be possible to de-anonymize users. Malicious users on the other hand may try to get more from what they deserve for data submitted. To prevent user misbehavior we will demand that only authorized users can access the system. Our design will ensure that users remain anonymous, their actions unlinkable and yet they cannot misbehave. The necessary requirements are listed below:\n<ul style=\"list-style-type:disc\"><li><p><i>Authorization</i>. The provider should be able to tell whether submitted data is coming from a legitimate, registered user, however without violating user privacy.</p></li><li><p><i>Confidentiality and integrity</i>. Reported data should be protected against eavesdroppers or malicious entities who want to read/modify this information. More importantly, blockchain transactions should not reveal any information about the sensed data.</p></li><li><p><i>Anonymity/unlinkability</i>. Neither the provider nor other users of the system should be able to learn anything about the identity of a user during the data reporting and payment phases of the protocol. Additionally, different sessions between the user and the provider should also be unlinkable to each other.</p></li><li><p><i>Protection against malicious providers</i>. Users should also be protected from providers who deny to pay (or pay less) for submitted data. Thus, it should not be possible for a provider to obtain the data for free or, more generally, in a price smaller than the one advertised by the rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {R}$\n</tex-math></inline-formula>.</p></li><li><p><i>Protection against double redemption attacks and malicious user behavior</i>. Similarly, providers should be protected against malicious users who might (i) obtain a reward and refuse to release the promised data, (ii) release data whose value is less than the promised one, or (iii) try to obtain more than one rewards for the same data.</p></li></ul></p><p><i>Operational Assumptions:</i> We will be assuming that data submissions take place through anonymous communication channels that protect the identities of communicating devices.</p><p>In this work we don\u2019t consider <i>narrow tasking</i> attacks, where the requestor imposes strict limitations on attributes of sensing devices, or <i>selective tasking</i> attacks, where the task is pushed to a limited set of participants. These attacks reduce the size of the anonymity set thus making it easier for the collector to de-anonymize users <a ref-type=\"bibr\" anchor=\"ref2\" id=\"context_ref_2_3b\">[2]</a>. These attacks are out of the scope of this work.</p><p>We also don\u2019t consider <i>data pollution</i> attacks, either. While we prevent malicious user behavior, we have no control over users that report <i>falsified</i> sensor data. One approach to this problem is attesting to the correct operation of the actual sensors as described in <a ref-type=\"bibr\" anchor=\"ref26\" id=\"context_ref_26_3b\">[26]</a>. Another approach would be to use reputation frameworks that can penalize users that submit erroneous data <a ref-type=\"bibr\" anchor=\"ref27\" id=\"context_ref_27_3b\">[27]</a>, <a ref-type=\"bibr\" anchor=\"ref28\" id=\"context_ref_28_3b\">[28]</a>. Such systems are complementary to our approach and can be used with our rewarding protocol. We note here that as the control of the sensing process is delegated to people, who may deliver (or not) sensed data or even choose to abuse the system, enforcing quality of data in mobile crowd-sensing is an important research area <a ref-type=\"bibr\" anchor=\"ref29\" id=\"context_ref_29_3b\">[29]</a>. Here, we briefly describe how code attestation can be used in this respect. In particular, if user devices come equipped with a trusted platform module (TPM) chip, they can be used to vouch for the correct operation of the sensors involved. Furthermore, the TPM supports unlinkable keys that can be used to maintain anonymity between different parties who require the proof of identity. These keys can used to digitally sign a hash of the sensed data thus ensuring not only the anonymity of the transaction but the truthfullness of the submission through appropriate code attestation.</p><p>Finally, while we make every effort to make our system privacy-preserving, we should note that Bitcoin is only pseudonymous by design; but pseudonymity is not enough to achieve privacy. As all blockchain transactions are publicly visible, if a bitcoin address is ever linked to a real-world identity (e.g. when physically buy something or having an item delivered home) then all past (and future) transactions can be linked to that identity. Thus, while our protocol ensures that <i>ephemeral</i> bitcoin addresses are used and data submissions and payments are unlinkable to each other, additional precautions are required to <i>spend</i> the bitcoins collected <a ref-type=\"bibr\" anchor=\"ref30\" id=\"context_ref_30_3b\">[30]</a>.</p><p>The desirable set of security properties expected from our system will be defined by means of experiments using a polynomial time adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> who may control other users or eavesdrop on honest ones. Additionally, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> has access and may manipulate the messages exchanged in the scope of the protocol. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s behavior will be captured by the set of oracles defined below:\n<ul style=\"list-style-type:disc\"><li><p>In <i>Register*</i> (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula>), <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> initiates <i>Register</i> with an honest <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula> assuming there are no pending <i>Register*</i> calls for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula> yet. We assume that the secret keys <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> are unique and unknown to the adversary.</p></li><li><p>In <i>Submit*</i> (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula>), <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> initiates the <i>Submit</i> protocol with an honest <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula> for some data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula>.</p></li><li><p>In <i>Verify*(</i> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula>), <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> initiates the <i>Verify</i> procedure with an honest <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> for input <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula>.</p></li><li><p>In <i>Release*</i> (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula>), <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> initiates the <i>Release</i> procedure with an honest <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula> and input <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula>.</p></li></ul></p><p>The properties of authorization, balance between value of data and payments, and double-redemption detection are formally defined below. The first property ensures that only authorized users can obtain rewards for data they submit.</p><p><div class=\"section_2\" id=\"definition2\"><h4>Definition 2 (Authorization):</h4><p>A data submission and rewarding scheme protects against unauthorized data submissions and payments if for any PPT adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula>, the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{Auth}_{\\mathcal A}}(\\kappa)$\n</tex-math></inline-formula> below is negligible.<div class=\"inline-story\"><p>Experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${{\\mathrm {Exp}}}_{\\mathcal{A}}^{\\text {Auth }}$\n</tex-math></inline-formula></p><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(C R S,\\left(p k_{\\mathcal{P}}, s k_{\\mathcal{P}}\\right)\\right) \\leftarrow$\n</tex-math></inline-formula> <i>Setup</i> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(1^{\\kappa}\\right)$\n</tex-math></inline-formula>. Then run <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}^{\\mathsf {Register }^{\\star}, \\mathsf { Submit }^{\\star}, \\mathsf { Verify }^{\\star}, \\mathsf { Release }^{\\star}}\\left(p k_{\\mathcal{U}}^e, p k_{\\mathcal{P}}\\right)$\n</tex-math></inline-formula>. The experiment outputs 1 iff</p><p>\n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> holds a signed credential <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(pk_{\\mathcal{U}}^{e}, sk_{\\mathcal{U}}^{e}\\right)$\n</tex-math></inline-formula> that has not been the output of any previous <i>Register<sup>*</sup></i> query; or</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> successfully submits data using the <i>Submit<sup>\u22c6</sup></i>, <i>Verify</i><sup>\u22c6</sup>, <i>Release</i><sup>\u22c6</sup> oracles such that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{P}$\n</tex-math></inline-formula> is convinced that the calls involve a valid credential <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula> that has not been the output of a prior <i>Register</i><sup>\u22c6</sup> call..</p></li></ol></p></div></p></div></p><p>The property of Double-redeeming Detection (DrD), ensures that data submissions initiated by some user for the same sensing task can be detected and prevented.</p><p><div class=\"section_2\" id=\"definition3\"><h4>Definition 3 (Double-Redeeming Detection):</h4><p>A data submission and rewarding scheme successfully prevents double-redeeming attempts if for any PPT adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula>, the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{DrD}_{\\mathcal A}}(\\kappa)$\n</tex-math></inline-formula> below is negligible.<div class=\"inline-story\"><p><i><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\text { Experiment } \\operatorname{Exp}_{\\mathcal{A}}^{\\text {DrD }}$\n</tex-math></inline-formula></i></p><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(C R S,\\left(p k_{\\mathcal{P}}, sk_{\\mathcal{P}}\\right)\\right) \\leftarrow \\mathsf{Setup}\\left(1^{\\kappa}\\right)$\n</tex-math></inline-formula>. Then run <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}^{\\mathsf {Register }^{\\star}, \\mathsf { Submit }^{\\star}, \\mathsf { Verify }^{\\star}, \\mathsf { Release }^{\\star}}~(pk\\mathcal{P})$\n</tex-math></inline-formula>. The experiment returns 1 iff <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> makes two successful <i>Submit</i> or <i>Release</i> queries to the same data, and at least one of the following is true:\n<ul style=\"list-style-type:disc\"><li><p>The user public-keys extracted from the queries are <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{2}$\n</tex-math></inline-formula>, with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{1} \\neq pk_{\\mathcal{U}}^{2}$\n</tex-math></inline-formula> or</p></li><li><p>The double-redeeming tags shown in these two queries are <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t_{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t_{2}$\n</tex-math></inline-formula> respectively, with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t_{1} \\neq t_{2}$\n</tex-math></inline-formula></p></li><li><p><i>IdentDR</i> with these two transactions outputs 0.</p></li></ul></p></div></p></div></p><p>We next consider the provider balance property (<i>BaP</i>). This property ensures that the amount redeemed for data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula> cannot exceed <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}(m_{1},\\ldots,m_{n})$\n</tex-math></inline-formula>, the value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> returned by the application of the rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {R}$\n</tex-math></inline-formula> on data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{i}$\n</tex-math></inline-formula>. This also suggests that an adversarial user cannot cheat an honest provider by getting a reward and releasing no data, or by releasing data of value less than <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula>.</p><p><div class=\"section_2\" id=\"definition4\"><h4>Definition 4 (Provider Balance):</h4><p>A data submission and rewarding scheme achieves Provider Balance if for any PPT adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula>, the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{BaP}_{\\mathcal A}}(\\kappa)$\n</tex-math></inline-formula> below is negligible.<div class=\"inline-story\"><p><i><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\text { Experiment } \\operatorname{Exp}_{\\mathcal{A}}^{\\text {BaP}}$\n</tex-math></inline-formula></i></p><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(C R S,\\left(p k_{\\mathcal{P}}, sk_{\\mathcal{P}}\\right)\\right) \\leftarrow \\mathsf{Setup}\\left(1^{\\kappa}\\right)$\n</tex-math></inline-formula>. Then run <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}^{\\mathsf {Register }^{\\star}, \\mathsf { Submit }^{\\star}, \\mathsf { Verify }^{\\star}, \\mathsf { Release }^{\\star}}~(pk\\mathcal{P})$\n</tex-math></inline-formula>. The experiment outputs 1 if one of the following happens:\n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> was able to extract a valid keypair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(p k_{\\mathcal{U}}^{e}, sk_{\\mathcal{U}}^{e}\\right)$\n</tex-math></inline-formula> which can now use it to sign a new bitcoin transaction using <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula>, thus spending another user's reward; or</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> obtains a payment larger than <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{R}\\left(m_{1}, \\ldots, m_{n}\\right)$\n</tex-math></inline-formula> for data submitted with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula>; or</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> claims another payment for the same data and <i>IdentDR</i> outputs zero.</p></li></ol></p></div></p></div></p><p>In an entirely analogous way, the user balance property (<i>BaU</i>) prevents a malicious provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> to cheat an honest user by paying less than what the user deserves for the data provided.</p><p><div class=\"section_2\" id=\"definition5\"><h4>Definition 5 (User Balance):</h4><p>A data submission and rewarding scheme achieves User Balance if for any PPT adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula>, the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{BaU}_{\\mathcal A}}(\\kappa)$\n</tex-math></inline-formula> below is negligible.<div class=\"inline-story\"><p><i><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\text { Experiment } \\operatorname{Exp}_{\\mathcal{A}}^{\\text {BaU}}$\n</tex-math></inline-formula></i></p><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(C R S,\\left(p k_{\\mathcal{P}}, sk_{\\mathcal{P}}\\right)\\right) \\leftarrow \\mathsf{Setup}\\left(1^{\\kappa}\\right)$\n</tex-math></inline-formula>. Then run <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}^{\\mathsf {Register }^{\\star}, \\mathsf { Submit }^{\\star}, \\mathsf { Verify }^{\\star}, \\mathsf { Release }^{\\star}}\\left(p k_{\\mathcal{U}}^e, pk_{\\mathcal{P}}\\right)$\n</tex-math></inline-formula>. The experiment outputs 1 if one of the following happens: \n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> was able to extract a valid keypair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(p k_{\\mathcal{U}}^{e}, s k_{\\mathcal{U}}^{e}\\right)$\n</tex-math></inline-formula> which can now use it to sign a new bitcoin transaction using <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$s k_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula>, hence spending another user's reward; or</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> pays less than <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{R}\\left(m_{1}, \\ldots, m_{n}\\right)$\n</tex-math></inline-formula> for data submitted with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula>; or</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> makes a payment that is smaller than the value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{R}\\left(m_{1}, \\ldots, m_{n}\\right)$\n</tex-math></inline-formula> of previously submitted data with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$p k_{\\mathcal{U}}^{e}$\n</tex-math></inline-formula></p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> recovers the key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> and decrypts the encrypted data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula>.</p></li></ol></p></div></p></div></p><p>We next turn our attention to privacy. The goal of a malicious provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> is to identify the user or link protocol operations. In general, data submissions and payments (even by the same user) should not be linkable to the user, and the actions of one user should not be distinguishable from the actions of another user. To formalize this behavior, we introduce an additional oracle <i>Corrupt</i> (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal U$\n</tex-math></inline-formula>) which allows <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> obtain the user\u2019s secret key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal U}$\n</tex-math></inline-formula>.</p><p><div class=\"section_2\" id=\"definition6\"><h4>Definition 6(Privacy):</h4><p>A data submission and rewarding scheme is user-private if for any PPT adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula>, the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{Priv}_{\\mathcal A}}(\\kappa)$\n</tex-math></inline-formula> below is negligibly close to 1/2.</p></div></p></div></div>\n<div class=\"section\" id=\"sec4\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION IV.</div><h2>Tools</h2></div><p>In what follows we describe the main tools we will be using in our proposal.<div class=\"inline-story\"><p><i><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\text { Experiment } \\operatorname{Exp}_{\\mathcal{A}}^{\\text {Priv }}$\n</tex-math></inline-formula></i></p><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\left(C R S,\\left(p k_{\\mathcal{P}}, s k_{\\mathcal{P}}\\right)\\right) \\leftarrow \\mathsf{Setup}\\left(1^{\\kappa}\\right)$\n</tex-math></inline-formula>. The experiment consists of the following phases: \n<ul style=\"list-style-type:disc\"><li><p><i>Learning phase</i>: <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> asks any number of users to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf{Register}^{\\star}, \\mathsf{Submit}^{\\star}, \\mathsf{Release}^{\\star}$\n</tex-math></inline-formula> data multiple times. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> may also <i>Corrupt</i> any number of users except two that will be used in the challenge phase.</p></li><li><p><i>Challenge phase:</i> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> picks two honest users <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{2}$\n</tex-math></inline-formula> whose key material has not been corrupted in the previous phase. The challenge oracle selects at random a bit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b \\in\\{0,1\\}$\n</tex-math></inline-formula> and sets user <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{L}$\n</tex-math></inline-formula> equal to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{b}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{R}$\n</tex-math></inline-formula> equal to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{1-b}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> chooses data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula> and may execute the following steps:\n<ul style=\"list-style-type:disc\"><li><p>Ask users <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{L}$\n</tex-math></inline-formula> or <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{R}$\n</tex-math></inline-formula> to submit data using <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf{Submit}^{\\star}$\n</tex-math></inline-formula></p></li><li><p>Ask users <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{L}$\n</tex-math></inline-formula> or <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{U}_{R}$\n</tex-math></inline-formula> to receive payments using <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf{Release}^{\\star}$\n</tex-math></inline-formula>.</p></li></ul></p></li><li><p><i>Post-Challenge phase</i>: <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> asks both users to further <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf{Submit}, \\mathsf{Release}^{\\star}$\n</tex-math></inline-formula> data multiple times and concurrently.</p></li></ul></p><p>The experiment returns 1 if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal{A}$\n</tex-math></inline-formula> outputs a guess bit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b^{\\prime}$\n</tex-math></inline-formula> which is equal to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b$\n</tex-math></inline-formula>.</p></div></p><div class=\"section_2\" id=\"sec4a\"><h3>A. ZKSNARKS</h3><p>Our protocol is based on the security of zero-knowledge Succinct Non-interactive ARguments of Knowledge (<i>zkSNARKs</i>) as developed in <a ref-type=\"bibr\" anchor=\"ref31\" id=\"context_ref_31_4a\">[31]</a>. <i>zkSNARKs</i> allow a prover to convince a verifier about the validity of an NP statement by constructing a small size proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>.</p><p><i>zkSNARKs</i> consist of three algorithms setup, prove and verify. The setup algorithm, given a security parameter <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\kappa $\n</tex-math></inline-formula> and an NP language <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$L$\n</tex-math></inline-formula> corresponding to a relation <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$R=\\{x,w\\}$\n</tex-math></inline-formula> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$w$\n</tex-math></inline-formula> is a witness that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$x\\in L$\n</tex-math></inline-formula>, outputs a common reference string <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula> consisting of a public evaluation key for proving that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$w$\n</tex-math></inline-formula> is a witness for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$x$\n</tex-math></inline-formula> and a public verification key used in the verification of such statements. Prove is an algorithm that, given <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ CRS}}, x$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$w$\n</tex-math></inline-formula>, produces a proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$w$\n</tex-math></inline-formula> is a valid witness for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$x$\n</tex-math></inline-formula>. Verify is an algorithm that given <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ CRS}}, x, \\pi $\n</tex-math></inline-formula> outputs either \u2018Accept\u2019 or \u2018Reject\u2019 depending on the validity of the proof.</p><p>The following properties are expected by a secure <i>zkSNARK</i> scheme <a ref-type=\"bibr\" anchor=\"ref31\" id=\"context_ref_31_4a\">[31]</a>:\n<ul style=\"list-style-type:disc\"><li><p><i>Completeness</i>. For <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(x,w)\\in R$\n</tex-math></inline-formula>, a proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> can be generated such that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Verify(x, \\pi)$\n</tex-math></inline-formula> outputs \u2018Accept\u2019.</p></li><li><p><i>Soundness</i>. No malicious prover can produce a proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> for a false statement such that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Verify(x, \\pi)$\n</tex-math></inline-formula> outputs \u2018Accept\u2019.</p></li><li><p><i>Zero-knowledge</i>. A polynomial time simulator <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$S$\n</tex-math></inline-formula> exists such that for any <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$x \\in L_{Q}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$S$\n</tex-math></inline-formula> can generate a proof that cannot be distinguished from a real one.</p></li></ul></p><p><div class=\"section_2\" id=\"\"><h4>Remark 1:</h4><p>The common reference string (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula>) in <i>zkSNARKs</i> must be generated in a trustworthy manner. Otherwise, a malicious verifier (in this case the service provider) can construct a <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula> that allows it to derive the user\u2019s secret keys or data. This can be prevented if the user examines the well-formedness of the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula>. Thus no trust is really placed on the service provider. Another possibility is to use Subversion-NIZK <a ref-type=\"bibr\" anchor=\"ref32\" id=\"context_ref_32_4a\">[32]</a> proofs, where the zero-knowledge property is maintained even when a (possibly malicious) verifier chooses the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula>.</p></div></p></div><div class=\"section_2\" id=\"sec4b\"><h3>B. Blockchain</h3><p>A blockchain is decentralized and distributed public ledger that is used to record transactions. It is a linked-list data structure consisting of block of transactions, where each block also contains the hash of the previous listed block. Thus attempting to modify an existing transaction will result in a chain of updates; however this cannot happen without consensus by the majority of the peers maintaining the ledger. This property gives the blockchain its immutable, verifiable and transparent character. In this work, we will consider both simple bitcoin payments and smart contracts to handle user rewards.</p><div class=\"section_2\" id=\"sec4b1\"><h4>1) Bitcoin Blockchain</h4><p>The blockchain will be used as the means to reward users for the sensed data they provide. Payments are made and sent to <i>bitcoin addresses</i> which are created privately by users of the system. Addresses are bound to (hashes of) user public keys and transactions must be signed to be considered authentic. Hence addresses act as user pseudonyms. However, as anyone can see the balance and transactions on these addresses, it is advised that each such address is only used once.</p><p>Transactions can be used to transfer bitcoins from one party to another. One such example is the <i>Pay-to-Script-Hash</i> (P2SH) <a ref-type=\"bibr\" anchor=\"ref33\" id=\"context_ref_33_4b1\">[33]</a> in which a payment is made to a script matching a particular hash value. In our case, the hash value will correspond to the hash of the key encrypting the sensed data, and the user will have to reveal this key in order to get paid. The encrypted data and the key will be sent from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> <i>offchain</i> in order for the P2SH to be constructed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> and posted to the blockchain. This P2SH transaction can also be made a <i>time-locked</i> one in which case the provider can re-claim its money if the user misbehaves and does not release the key before a specific time bound.</p></div><div class=\"section_2\" id=\"sec4b2\"><h4>2) Ethereum Blockchain</h4><p>While the bitcoin blockchain can handle only relatively simple scripts, an alternative is to have computer code stored and executed by all nodes in the blockchain network. Such code is also known as a smart contract. Smart contracts are called by addressing a transaction to them and miners are responsible for processing them. The most well-known smart contract enabled blockchain is Ethereum <a ref-type=\"bibr\" anchor=\"ref34\" id=\"context_ref_34_4b2\">[34]</a>. In Ethereum, miners and rewarded for processing transactions via fees which are paid in gas. These fees depend on the complexity of the smart contract scripts.</p><p>In the experimental section, we will demonstrate that only very simple scripts and bitcoin transactions are needed to handle user rewards. This is due to the fact that the blockchain network is only used to post the \u2018key-for-payment\u2019 transactions. The rest of the protocol steps (can be combined to a <i>single</i> message) are taking place <i>offchain</i>, thus making the entire protocol very efficient.</p></div></div></div>\n<div class=\"section\" id=\"sec5\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION V.</div><h2>Protocol Details</h2></div><div class=\"section_2\" id=\"sec5a\"><h3>A. Overview</h3><p>In the main operational phase of our protocol, a user <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> wants to receive a payment from a service provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> for data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula> sensed with her smart device. The data worths some value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> which can be computed by the application of a rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula> is announced by the provider and its purpose is to capture the value of the data for attributes set forth by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> for the given task such as location, sensing time, sampling frequency, type of sensor used, and so on.</p><p>The utility <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val = {\\mathcal{ R}}(m_{1}, \\ldots, m_{n})$\n</tex-math></inline-formula> is calculated locally at the mobile device, as all necessary information is already available to the user. However, the data cannot be released to the provider as <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> may act maliciously and refuse to pay the user. Hence the data is sent encrypted using a one-time key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. This key will be released only when the provider posts a time-locked transaction offering <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins in exchange for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. However, before the provider posts this transaction, it must be convinced that the encrypted data worth value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> and have not been submitted before by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula>. This is an NP statement and can be implemented efficiently using a <i>zkSNARK</i> proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>. Once this proof is verified, the key-for-money transaction takes place.</p><p>This ensures that no party can cheat; the provider is certain that whoever claims the money must present the correct decryption key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> used in the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>. Similarly, the user is sure that she will get her money when she posts <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. The above approach ensures that either both parties will get what they deserve or none can be in disadvantage.</p><p>A final issue that needs to be taken care is that the user\u2019s transaction must be signed with her secret key to be valid. However to ensure unlinkability and prevent <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ P}}$\n</tex-math></inline-formula> associating the signing key with multiple submissions of data from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula>, this key has to be an <i>one-time, ephemeral</i> key. But while this ephemeral key will not be tied to a particular user, we need to ensure that only authorized users can submit data. This tension between unlinkability and accountability will be the focus of subsequent sections.</p></div><div class=\"section_2\" id=\"sec5b\"><h3>B. Setup</h3><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Setup}(1^{\\kappa })$\n</tex-math></inline-formula> is used to initialize the system. This method creates the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {CRS}$\n</tex-math></inline-formula> used in the <i>zkSNARKs</i> operations. The provider\u2019s public/private key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ P}}, sk_{\\mathcal{ P}})$\n</tex-math></inline-formula> is generated as well.</p></div><div class=\"section_2\" id=\"sec5c\"><h3>C. Registration</h3><p>One of the key requirements of our protocol is that a user cannot claim more than one reward for the data they provide (double-redemption also known as double-spending). A simple way to prevent this is to embed information in the submitted data so that the user is either prevented or identified if she tries to double-redeem. This information will have the form of a <i>redeeming tag</i> <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau $\n</tex-math></inline-formula> that will be <i>unique</i> for the sensing task the user is responding to. Thus, if a user attempts to reap multiple rewards for a given task, she will be prevented from doing so. However, this must be carefully done to ensure that the user remains anonymous when she follows the protocol.</p><p>To this respect, before a user is allowed to participate in the crowd-sourcing application, she must register first. Thus she generates a public-private key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> and registers <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}$\n</tex-math></inline-formula> with the Service Provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> signs the user\u2019s public key and produces a certificate <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$cert_{U}$\n</tex-math></inline-formula> for the authenticity of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}$\n</tex-math></inline-formula>. The provider ensures that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}$\n</tex-math></inline-formula> is unique and stores it in its database along with any other useful information about the user. We define operation <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {CertVerify}_{\\mathcal{ P}}(cert_{\\mathcal{ U}})$\n</tex-math></inline-formula> that returns 1 if the public key of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> is indeed signed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. This can be used to test the authenticity of the public key contained in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$cert_{\\mathcal{ U}}$\n</tex-math></inline-formula>.</p><p>It is important to note here that this registration step correctly binds each user identity to a <i>unique</i> credential. This is to ensure accountability by preventing Sybil attacks, guaranteeing that only authenticated users participate in the system, and eventually, preventing double-redemptions of data. However, as we will see later on this step does not have any effects on user privacy since we make sure that users remain anonymous in all subsequent phases of the protocol. The user\u2019s key pair can now be used to establish an <i>ephemeral</i> bitcoin address that will be used in the actual rewarding phase to provide for unlinkability between the reported data and the rewards.</p><p>In view of this, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> generates a new public-private key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}^{e}, sk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula> and asks the provider to <i>blindly</i> sign <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> using any secure blind signature scheme. For example, if the provider possesses an RSA key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(e_{\\mathcal{ P}}, d_{\\mathcal{ P}})$\n</tex-math></inline-formula>, the user can first send <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$r^{e_{\\mathcal{ P}}} H(pk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula> to the provider, where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$r$\n</tex-math></inline-formula> is some blinding factor chosen by the user and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$H$\n</tex-math></inline-formula> a secure hash function. After signing with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>\u2019s private key, the user obtains a signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$r (H(pk_{\\mathcal{ U}}^{e})^{d_{\\mathcal{ P}}}$\n</tex-math></inline-formula>, which after removal of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$r$\n</tex-math></inline-formula>, is a signature on the hash of the ephemeral key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula>. Thus, when the provider sees such a bitcoin address, it knows it is coming from an authenticated user but cannot tell which user it is due to the security of the blind signature scheme. When all these steps are performed, the user is consider authorized and can participate in the crowd-sensing task.</p><p>It is necessary to use <i>different</i> ephemeral keys to collect rewards in order to provide unlinkability between these rewards. Thus each bitcoin address should only be used <i>once</i> (recall <a ref-type=\"sec\" anchor=\"sec3b\" class=\"fulltext-link\">Section III-B</a>), hence whenever the user wants to submit data for a new task, she has to obtain a new bitcoin address. The user may have as many ephemeral keys authenticated as she likes simply by asking the provider to blindly sign multiple keys as described above. However, if the provider does not want to do so, new ephemeral keys can be generated during data submission. <a ref-type=\"sec\" anchor=\"sec5e1\" class=\"fulltext-link\">Section V-E1</a> describes how this can be done in an unlinkable way.</p></div><div class=\"section_2\" id=\"sec5d\"><h3>D. Task Advertising</h3><p>When the provider needs to collect data about a particular sensing task, it has to advertise the task to the users. As mentioned in <a ref-type=\"sec\" anchor=\"sec3\" class=\"fulltext-link\">Section III</a>, this is typically the job of a task server which users may contact. Here, however, we will not distinguish between the service provider and the task server.</p><p>Each sensing task may ask for user data or other useful information based on various criteria (region, sampling frequency, etc.). Tasks can be either downloaded by users (<i>pull</i> model) or sent to them when the provider has a new sensing task (<i>push</i> model). The tasking and downloading processes may endanger the privacy of the participants in several ways (recall the <i>narrow and selective tasking</i> attacks mentioned in <a ref-type=\"sec\" anchor=\"sec3b\" class=\"fulltext-link\">Section III-B</a>. These attacks are out of the scope of this work as our main focus is on rewarding, however we must insist that users communicate with the service provider through <i>anonymizing</i> networks like TOR.</p><p>An example of a task published by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> is shown below. In this task participants have to report 5 min temperature readings in London for a duration of one day.<disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*}\\begin{array}{ll} s=\\langle &amp; \\textit {taskID} = \\#53621,\\\\ &amp; \\textit {Location} = London,\\\\ &amp; \\textit {sensingType} = getTemperature,\\\\ &amp; \\textit {Frequency} = \\textit {5 min},\\\\ &amp; \\textit {Start} = \\textit {April 1, 2022},\\\\ &amp; \\textit {Duration} = \\textit {24 h}\\; \\; \\rangle \\end{array}\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*}\\begin{array}{ll} s=\\langle &amp; \\textit {taskID} = \\#53621,\\\\ &amp; \\textit {Location} = London,\\\\ &amp; \\textit {sensingType} = getTemperature,\\\\ &amp; \\textit {Frequency} = \\textit {5 min},\\\\ &amp; \\textit {Start} = \\textit {April 1, 2022},\\\\ &amp; \\textit {Duration} = \\textit {24 h}\\; \\; \\rangle \\end{array}\\end{align*}\n</span></span></disp-formula></p><p>Such a task will be unique as indicated by its <i>taskID</i> and must be <i>signed</i> by the provider to be valid. Thus any user downloading such a task will know that is an authentic one. The uniqueness of the task will come into play later on as it will be crucial to ensure that no user can double-redeem, i.e. obtain more than one reward for the same task.</p><p>In addition to the task, the provider will publish its rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula>. Users can use this function to compute the amount of reward they will get for the data they provide. The reward <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> for data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula> will result from the application of this function on the data and some auxiliary variables <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$a_{i}$\n</tex-math></inline-formula>, i.e. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val = {\\mathcal{ R}}(a_{1}, \\ldots, a_{k}, m_{1},\\ldots, m_{n})$\n</tex-math></inline-formula>. The rewarding function is also public information and is known to the users.</p></div><div class=\"section_2\" id=\"sec5e\"><h3>E. Responding to a Sensing Task</h3><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m_{1}, \\ldots, m_{n}$\n</tex-math></inline-formula> be the measurements to be reported to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ P}}$\n</tex-math></inline-formula>. User <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> applies the rewarding function to compute the value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val = {\\mathcal{ R}}(m_{1},\\ldots, m_{n})$\n</tex-math></inline-formula> of the data. Now <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> has to convince <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ P}}$\n</tex-math></inline-formula> about the utility of the data, however without sending the data as is. To do so, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> engages in the following steps:\n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> encrypts the data with a one-time symmetric key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> to produce a ciphertext <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C=E_{K}(m_{1}, \\ldots, m_{n})$\n</tex-math></inline-formula>. Both <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> and the hash <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{K}$\n</tex-math></inline-formula> of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> will be sent to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> along with a proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> that proves knowledge of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> and the valuation <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> of the data. In addition to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula>, the user constructs and sends a double-redeeming tag <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau = H(taskID, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula>, where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula> denotes the <i>long term</i> private key of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula>. The role of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau $\n</tex-math></inline-formula> is to prevent the user from redeeming the same data twice for the given task.</p></li><li><p>Given public information <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\langle taskID, C,h_{K},val, \\tau \\rangle $\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> constructs a <i>zkSNARK</i> proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> that demonstrates it knows <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(m_{1},\\ldots,m_{n},K, cert_{\\mathcal{ U}}, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> such that:\n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> was used for the encryption of the data and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$H(K) = h_{K}$\n</tex-math></inline-formula></p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau = H(taskID, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula></p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$cert_{\\mathcal{ U}}$\n</tex-math></inline-formula> is a valid certificate signed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula></p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val = {\\mathcal{ R}}(m_{1},\\ldots, m_{n})$\n</tex-math></inline-formula>.</p></li></ol></p></li></ol></p><p>More formally, if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {R}$\n</tex-math></inline-formula> is the rewarding function, we define the NP language <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {L}_{R}$\n</tex-math></inline-formula> for the <i>zkSNARK</i>-proof system to be the set of the following NP statements:<disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*} \\mathcal{L}_{R} = \\left\\{\\begin{array}{l|l} \\left\\langle\\text { taskID }, C, h_K, \\tau, \\text { val }\\right\\rangle &amp; \\begin{array}{l} \\exists\\left\\{m_i\\right\\}_{i=1}^n, K, \\text { cert }_{\\mathcal{U}}, s_{\\mathcal{U}}: \\\\ h_K=H(K) \\\\ C=E_K\\left(m_1, \\ldots, m_n\\right) \\\\ \\tau=H\\left(\\text { taskID }, s k_{\\mathcal{U}}\\right) \\\\ \\mathsf { CertVerify } \\mathcal{P}(\\text { cert } \\mathcal{U}) \\\\ \\mathsf { GenVerify }\\left(p k_{\\mathcal{U}}, s_{\\mathcal{U}}\\right)=1 \\\\ \\text { val }=\\mathcal{R}\\left(m_1, m_2, \\ldots, m_n\\right) \\end{array} \\end{array}\\right\\},\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*} \\mathcal{L}_{R} = \\left\\{\\begin{array}{l|l} \\left\\langle\\text { taskID }, C, h_K, \\tau, \\text { val }\\right\\rangle &amp; \\begin{array}{l} \\exists\\left\\{m_i\\right\\}_{i=1}^n, K, \\text { cert }_{\\mathcal{U}}, s_{\\mathcal{U}}: \\\\ h_K=H(K) \\\\ C=E_K\\left(m_1, \\ldots, m_n\\right) \\\\ \\tau=H\\left(\\text { taskID }, s k_{\\mathcal{U}}\\right) \\\\ \\mathsf { CertVerify } \\mathcal{P}(\\text { cert } \\mathcal{U}) \\\\ \\mathsf { GenVerify }\\left(p k_{\\mathcal{U}}, s_{\\mathcal{U}}\\right)=1 \\\\ \\text { val }=\\mathcal{R}\\left(m_1, m_2, \\ldots, m_n\\right) \\end{array} \\end{array}\\right\\},\\end{align*}\n</span></span></disp-formula> where operation <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {GenVerify}(pk_{\\mathcal{ U}}, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> returns 1 if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}, sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> is a valid public-private key pair. This is needed to ensure that the user created the redeeming tag with its long term key, thus linking <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula> with the public key in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$cert_{\\mathcal{ U}}$\n</tex-math></inline-formula>. For example, if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$x$\n</tex-math></inline-formula> is the user\u2019s secret key and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$y=g^{x}$\n</tex-math></inline-formula> her public key for some generator <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$g$\n</tex-math></inline-formula>, then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {GenVerify}$\n</tex-math></inline-formula> simply checks that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$y=g^{x}$\n</tex-math></inline-formula> and returns 1 if the test succeeds.</p><p>At this point, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> sends the following message to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. <disp-formula id=\"deqn1\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*} {\\mathcal {U}\\xrightarrow [{~\\text {offchain}}]{{~\\text {Anon}}} P}: \\; Enc_{\\mathcal{ P}}(C), h_{K}, val, \\tau, \\pi, pk_{\\mathcal{ U}}^{e}, Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e}), \\sigma _{e}\\!\\! \\\\{}\\tag{1}\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*} {\\mathcal {U}\\xrightarrow [{~\\text {offchain}}]{{~\\text {Anon}}} P}: \\; Enc_{\\mathcal{ P}}(C), h_{K}, val, \\tau, \\pi, pk_{\\mathcal{ U}}^{e}, Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e}), \\sigma _{e}\\!\\! \\\\{}\\tag{1}\\end{align*}\n</span></span></disp-formula></p><p>This message is signed with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula>\u2019s <i>ephemeral</i> key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> to produce a signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\sigma _{e}$\n</tex-math></inline-formula> and is sent through an anonymizing network connection. The ciphertext <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> is <i>encrypted</i> with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ P}}$\n</tex-math></inline-formula>\u2019s public key to prevent third parties from accessing the data in <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> once the key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> is posted to the blockchain by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula>. Thus only <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> can obtain the data. This message takes place <i>offchain</i>.</p><p>Notice that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> also sends its ephemeral public key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> that was blindly signed during the registration phase. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula> is the associated signature that can be used to verify the validity of the key. This ephemeral key (bitcoin address) will be used by the provider to pay for the data during the onchain phase of the protocol.</p><div class=\"section_2\" id=\"sec5e1\"><h4>1) Generating Ephemeral Keys on the Fly</h4><p>To ensure unlinkability, new ephemeral keys must be generated with every new data submission and payment made. To do this, the process can be combined with data submission, hence there is no need to run the registration procedure from scratch.</p><p>The user creates a new ephemeral key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e'}$\n</tex-math></inline-formula>, and sends a blinded version <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$r^{e_{\\mathcal{ P}}} h_{e'}$\n</tex-math></inline-formula> of its hash <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{e'}$\n</tex-math></inline-formula> along with the Message showed in <a ref-type=\"disp-formula\" anchor=\"deqn1\" href=\"#deqn1\" class=\"fulltext-link\">(1)</a>. The provider authenticates the user as the message is signed using the <i>current</i> ephemeral key. Then proceeds to sign the blinded hash value. Notice that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> cannot link the two keys together due to the security of the blind signature used. Hence new, signed ephemeral keys can be generated that cannot be linked to each other.</p></div></div><div class=\"section_2\" id=\"sec5f\"><h3>F. Getting Paid for the Data</h3><p>Once <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> obtains Message 1, it first verifies the signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\sigma _{e}$\n</tex-math></inline-formula> as coming from an authenticated ephemeral key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}$\n</tex-math></inline-formula> (recall the blind signature during registration) by checking <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula>. Then it verifies the correctness of the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>.</p><p>If everything checks out, it posts to the blockchain a time-locked transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> which says that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> offers <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> under the condition that \u201c<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> must present a pre-image <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> to the hash value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{K}$\n</tex-math></inline-formula> as well as a signature within some time window <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula>\u201d; if the conditions are not satisfied the bitcoins return to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>. More precisely, the transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> has an output of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins that can be redeemed by a (future) transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> if one of the following is true:\n<ol><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> is signed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> and contains a valid pre-image of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{K}$\n</tex-math></inline-formula>, or</p></li><li><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> is signed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> and the time window <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula> has expired.</p></li></ol></p><p>The transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> is satisfied if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> posts a transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> that contains <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. This would satisfy condition 1 of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> and so <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins are transferred to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula>. If <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> does not act within the time window <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula>, then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> can sign and post a transaction <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> that returns the <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> bitcoins back to him, thus satisfying the second condition of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula>. If <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> is posted with the wrong amount, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> simply aborts and does not release <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>.</p><p>This concludes the <i>onchain</i> phase and the description of the protocol. A summary of the protocol steps is shown in <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a>. Contrary to prior works, a single <i>offchain</i> message is sent from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>, thus contributing to the efficiency of the protocol.\n<div class=\"figure figure-full\" id=\"fig2\"><!--\n          Workaround for combined images.Eg.- 1000116 Fig. 5\n        --><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit2-3227633-large.gif\" data-fig-id=\"fig2\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit2-3227633-small.gif\" alt=\"FIGURE 2. - Data submission and rewarding. The offchain part consists of just one message from &#10;$\\mathcal {U}$&#10; to &#10;$\\mathcal {P}$&#10;.\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div><div class=\"figcaption\"><b class=\"title\">FIGURE 2. </b><fig><p>Data submission and rewarding. The offchain part consists of just one message from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>.</p></fig></div><p class=\"links\"><a href=\"/document/9976049/all-figures\" class=\"all\">Show All</a></p></div></p><p><div class=\"section_2\" id=\"\"><h4>Remark 1:</h4><p>To guarantee atomicity of transactions and ensure that a curious provider does not learn <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> without paying, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> must submit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> well before the expiration of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula>. To see why, consider the case where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula> posts <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> just before the eclipse of the time window <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula> while <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> posts <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> immediately after <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t$\n</tex-math></inline-formula> has expired. Then, it is possible (due to network delays or miners choice) that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T$\n</tex-math></inline-formula> ends up in the blockchain, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> is dropped and as a result <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> cannot receive the payment. However, since <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> posted <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> in the blockchain network, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> can peak at <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> even without paying. To prevent this, we need to consider the time it takes for a transaction to be permanently saved in the blockchain. In particular, denote by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t_{\\delta} $\n</tex-math></inline-formula> the time required for a transaction to be validated and stored in a blockchain block. Typically, this requires 6 confirmations (the more confirmations a transaction gets, the more probable it is that it will end up in the long-term consensus chain) which corresponds to about 60 minutes in Bitcoin and about 2 minutes in the Ethereum blockchain <a ref-type=\"bibr\" anchor=\"ref35\" id=\"context_ref_35_5f\">[35]</a>. Thus, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> should submit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> before <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$t-t_{\\delta} $\n</tex-math></inline-formula> to ensure her transaction is confirmed in the blockchain with high probability.</p></div></p></div></div>\n<div class=\"section\" id=\"sec6\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION VI.</div><h2>Security Analysis</h2></div><p>In this section, we analyze the security and privacy properties expected from our system.</p><div class=\"section_2\" id=\"sec6a\"><h3>A. Authorization</h3><p>By <a ref-type=\"definition\" anchor=\"definition2\" class=\"fulltext-link\">Definition 2</a>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> wins the authorization game if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> is in possession of a valid ephemeral key that is not the result of any <i>Register*</i> query. If this is possible, it means that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> either knows or can forge the key of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> without <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula>\u2019s involvement. Both conditions contradict the security of the underlying signature schemes used.</p><p>Alternatively, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal A$\n</tex-math></inline-formula> can make successful calls to <i>Submit*</i>, <i>Verify*</i>, and <i>Release*</i> queries such that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal P$\n</tex-math></inline-formula> believes that these calls involve a valid ephemeral key that is not the result of <i>Register*</i> up to this moment. But this is not possible since <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> could not have generated the signature without knowledge of the secret ephemeral key. The security of the signing algorithms ensures that this cannot happen.</p><p>The above intuition is captured by the following theorem:</p><p><div class=\"section_2\" id=\"theorem1\"><h4>Theorem 1(Authorization):</h4><p>Assume the signature scheme used in the creation of the authorization credential is unforgeable. Then our rewarding scheme satisfies <a ref-type=\"definition\" anchor=\"definition2\" class=\"fulltext-link\">Definition 2</a>.</p><p><div class=\"section_2\" id=\"\"><h4>Proof:</h4><p>Consider adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{Auth}_{\\mathcal A}}$\n</tex-math></inline-formula>. Then <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\mathsf {Adv^{Auth}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)},\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\mathsf {Adv^{Auth}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)},\\end{equation*}\n</span></span></disp-formula> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}$\n</tex-math></inline-formula> is the advantage of an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> that breaks the unforgeability of the signature scheme.</p><p>We will show that if either of the cases mentioned above happens, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> exists that succeeds in computing a signature using knowledge of the public key only. In order to answer the challenge in the signature unforgeability game, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> simulates <i>Register</i> queries by first generating an ephemeral key pair <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$(pk_{\\mathcal{ U}}^{e}, sk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula> then calling <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal A}^{\\textsf {Register*}}$\n</tex-math></inline-formula>.</p><p>If <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> forges a signature on the hash of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> (case 1 above) then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> could use this to win the unforgeability game. Alternatively, if <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> manages to pass verification when executing <i>Submit*</i>, <i>Verify*</i>, and <i>Release*</i> queries such that these calls involve a valid ephemeral key that has not been the output of an <i>Register</i> call (case 2) then again <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> could use this signature as its forgery. But since the signature scheme is secure, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {B} \\; \\textsf {wins}]$\n</tex-math></inline-formula> is bounded by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}$\n</tex-math></inline-formula>. Thus, <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\mathsf {Adv^{Auth}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\mathsf {Adv^{Auth}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}\\end{equation*}\n</span></span></disp-formula></p></div></p></div></p><div class=\"section_2\" id=\"sec6a1\"><h4>1) Double-Redeeming Detection</h4><p>Each double-redeeming tag <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau = H(taskID,sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> is bound to a unique user identity (as is expressed by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula>). Thus each user can only redeem once, as the data is associated with a specific task and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula>. Intuitively, a user can resubmit the same data only if it recovers the secret key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U'}}$\n</tex-math></inline-formula> of another user <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U'}}$\n</tex-math></inline-formula>. However, this is prevented by the one-wayness of the hash function and the zero knowledge property of the <i>zkSNARK</i> proof. Alternatively, a malicious user may try to provide a proof of an invalid statement to fool the verifier about the value of a redeeming tag.</p><p>The above intuition is captured by the following theorem:</p><p><div class=\"section_2\" id=\"\"><h4>Theorem 2 (Double-Redeeming Detection):</h4><p>If the hash function is one way, and the <i>zkSNARK</i> is sound and zero-knowledge, our rewarding scheme defends against double-redeeming detection attempts as captured in <a ref-type=\"definition\" anchor=\"definition3\" class=\"fulltext-link\">Definition 3</a>.</p><p><div class=\"section_2\" id=\"\"><h4>Proof:</h4><p>Consider adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{DrD}_{\\mathcal A}}$\n</tex-math></inline-formula>. Then <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{align*} \\mathsf {Adv^{DrD}_{\\mathcal A}(\\kappa)}\\leq&amp;\\;q\\cdot \\mathsf {Adv^{OW}_{\\mathcal B}(\\kappa)} \\\\&amp;+ \\, \\;q\\cdot \\mathsf {Adv^{ZK}_{POK, {\\mathcal C}}(\\kappa)} \\\\&amp;+ \\, \\;\\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)},\\end{align*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{align*} \\mathsf {Adv^{DrD}_{\\mathcal A}(\\kappa)}\\leq&amp;\\;q\\cdot \\mathsf {Adv^{OW}_{\\mathcal B}(\\kappa)} \\\\&amp;+ \\, \\;q\\cdot \\mathsf {Adv^{ZK}_{POK, {\\mathcal C}}(\\kappa)} \\\\&amp;+ \\, \\;\\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)},\\end{align*}\n</span></span></disp-formula> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{OW}_{\\mathcal B}(\\kappa)}$\n</tex-math></inline-formula> is the advantage of an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> that succeeds in breaking the one-way property of the hash function, and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{ZK}_{POK, {\\mathcal C}}(\\kappa)}, \\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\lambda)}$\n</tex-math></inline-formula> denote the advantages of adversaries <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}, D$\n</tex-math></inline-formula> that succeed in breaking the soundness and zero-knowledge properties of the underlying zkSNARK scheme.</p><p>We start with the case (denote it by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{DrD}_{\\mathcal {A},1}}$\n</tex-math></inline-formula>) where adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> observes a double-redeeming tag <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau = H(taskID,sk_{\\mathcal{ U}})$\n</tex-math></inline-formula> and recovers <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula>. Now she can act on behalf of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> and submit the same data under <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}$\n</tex-math></inline-formula>\u2019s key. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> exists that attacks the one-wayness property of the hash function. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> starts by executing <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}^{\\textsf {Register*, Submit*, Release*}}()$\n</tex-math></inline-formula> while simulating <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s queries. As the attack occurs, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> recovers the hidden key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula> of one of the users. Since it is not known which of the polynomially many (say <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$q$\n</tex-math></inline-formula>) tags causes this, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> selects one of these tags to answer the challenge. Therefore, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {B} \\; \\textsf {wins}] \\geq \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},1}}]/q$\n</tex-math></inline-formula>. However, since the hash function is one-way, we have that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {B} \\; \\textsf {wins}] \\leq \\mathsf {Adv^{OW}_{\\mathcal B}(\\kappa)}$\n</tex-math></inline-formula>, hence <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},1}}] \\leq q\\cdot \\mathsf {Adv^{OW}_{\\mathcal B}(\\kappa)}$\n</tex-math></inline-formula>.</p><p>Now, consider the case (denote it by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{DrD}_{\\mathcal {A},2}}$\n</tex-math></inline-formula>) where the adversary observes the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> and extracts <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}$\n</tex-math></inline-formula>. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> exists that uses <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> to attack the zero-knowledge of the <i>zkSNARK</i> scheme. As before, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> starts by executing <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}^{\\textsf {Register*, Submit*, Release*}}()$\n</tex-math></inline-formula> while simulating <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s queries. Because event <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{DrD}_{\\mathcal {A},2}}$\n</tex-math></inline-formula> occurs, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> would form a double-redeeming tag and submit it to its challenger in the ZK game. Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> be the proof it receives back. This is forwarded it to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> to distinguish between the real and the simulated proof. Thus, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {C} \\; \\textsf {wins}] \\geq \\Pr [\\mathsf {C^{Abr}_{\\mathcal {A},2}}]/q$\n</tex-math></inline-formula>. However, since the <i>zkSNARK</i> is zero-knowledge, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {C} \\; \\textsf {wins}] \\leq \\mathsf {Adv^{ZK}_{POK, {\\mathcal C}}(\\kappa)}$\n</tex-math></inline-formula>, hence <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathsf {E^{DrD}_{\\mathcal {A},2}}] \\leq q\\cdot \\mathsf {Adv^{ZK}_{POK, {\\mathcal C}}(\\kappa)}$\n</tex-math></inline-formula>.</p><p>Finally, consider the case (denote it by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{DrD}_{\\mathcal {A},3}}$\n</tex-math></inline-formula>), where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> successfully submits an invalid tag. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {D}$\n</tex-math></inline-formula> exists that uses <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> to attack the soundness of the <i>zkSNARK</i> proof system. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {D}$\n</tex-math></inline-formula> executes <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}^{\\textsf {Register*, Submit*, Release*}}()$\n</tex-math></inline-formula> while simulating <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s queries. Because event <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{DrD}_{\\mathcal {A},3}}$\n</tex-math></inline-formula> occurs, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> outputs a false proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi ^{*}$\n</tex-math></inline-formula> that fools a verifier. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {D}$\n</tex-math></inline-formula> then forwards this proof to its challenger to attack the soundness of the scheme. Therefore, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {D} \\; \\textsf {wins}] \\geq \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},3}}]$\n</tex-math></inline-formula>. However, since the <i>zkSNARK</i> is sound, we have that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},3}}] \\leq \\Pr [\\mathcal {B} \\; \\textsf {wins}] \\leq \\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)}$\n</tex-math></inline-formula>.</p><p>The proof of the theorem follows since <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\mathsf {Adv^{Abr}_{\\mathcal A}(\\kappa)} \\leq \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},1}}] + \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},2}}]+ \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},3}}].\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\mathsf {Adv^{Abr}_{\\mathcal A}(\\kappa)} \\leq \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},1}}] + \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},2}}]+ \\Pr [\\mathsf {C^{DrD}_{\\mathcal {A},3}}].\\end{equation*}\n</span></span></disp-formula></p></div></p></div></p></div><div class=\"section_2\" id=\"sec6a2\"><h4>2) Provider Balance</h4><p>Since both the authorization and double-redeeming properties hold, to win the provider balance game an adversarial user <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> must extract a valid signing ephemeral key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> and sign a new bitcoin transaction, sending the money to a bitcoin address owned by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>. This can only happen if forging signatures is possible. Similarly, obtaining a larger reward than the one embedded in the <i>zkSNARK</i> through the computation of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ R}}()$\n</tex-math></inline-formula> is also infeasible as this would break the soundness property of the proof system. Thus in both cases provider balance is preserved.</p><p>The above intuition is captured by the following theorem:</p><p><div class=\"section_2\" id=\"theorem3\"><h4>Theorem 3 (Provider Balance):</h4><p>If <a ref-type=\"theorem\" anchor=\"theorem1\" class=\"fulltext-link\">Theorem 1</a> is true, signatures are unforgeable and the <i>zkSNARK</i> is sound, our rewarding scheme satisfies <a ref-type=\"definition\" anchor=\"definition4\" class=\"fulltext-link\">Definition 4</a>.</p><p><div class=\"section_2\" id=\"\"><h4>Proof:</h4><p>Consider adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{BaP}_{\\mathcal A}}$\n</tex-math></inline-formula>. Then <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\mathsf {Adv^{BaP}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)} + \\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)},\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\mathsf {Adv^{BaP}_{\\mathcal A}(\\kappa)} \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)} + \\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)},\\end{equation*}\n</span></span></disp-formula> where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)}$\n</tex-math></inline-formula> are the advantages of adversaries <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B},C$\n</tex-math></inline-formula> that succeed in breaking the unforageability of signature sand the soundness of the underlying zkSNARK scheme, respectively.</p><p>We start with the case (denote it by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{BaP}_{\\mathcal {A},1}}$\n</tex-math></inline-formula>) where adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> observes a bitcoin transaction signed with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> and extracts the signing key. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> exists that wins in the signature unforgeability game as follows: <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> would simulate <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s actions and wait until <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> extracted the signing ephemeral key and posted a new bitcoin transaction with <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula>. Then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> could win the signature unforgeability game by submitting this signature to its challenger. Hence <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {B} \\; \\textsf {wins}] \\geq \\Pr [\\mathsf {C^{Bap}_{\\mathcal {A},1}}]$\n</tex-math></inline-formula>. However, as the signature scheme is unforgeable, we have that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {B} \\; \\textsf {wins}] \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}$\n</tex-math></inline-formula>, hence <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},1}}] \\leq \\mathsf {Adv^{UF-CMA}_{SIG, {\\mathcal B}}(\\kappa)}$\n</tex-math></inline-formula>.</p><p>Now consider the case (denote it by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {C^{BaP}_{\\mathcal {A},2}}$\n</tex-math></inline-formula>), where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> successfully submits a false proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi ^{*}$\n</tex-math></inline-formula>. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> exists that breaks the soundness of the underlying <i>zkSNARK</i> scheme as follows. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> starts by executing <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}^{\\textsf {Register*, Submit*, Release*}}()$\n</tex-math></inline-formula> while simulating <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s queries. When <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> produces the false proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi ^{*}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {C}$\n</tex-math></inline-formula> would submit this proof to its challenger in the ZK soundness game. Therefore, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathcal {C} \\; \\textsf {wins}] \\geq \\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},2}}]$\n</tex-math></inline-formula>. However, since the <i>zkSNARK</i> is sound, we have that <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},2}}] \\leq \\Pr [\\mathcal {C} \\; \\textsf {wins}] \\leq \\mathsf {Adv^{sound}_{POK, {\\mathcal C}}(\\kappa)}$\n</tex-math></inline-formula>.</p><p>The proof of the theorem follows since <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\mathsf {Adv^{BaP}_{\\mathcal A}(\\kappa)} \\leq \\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},1}}] + \\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},2}}].\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\mathsf {Adv^{BaP}_{\\mathcal A}(\\kappa)} \\leq \\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},1}}] + \\Pr [\\mathsf {C^{BaP}_{\\mathcal {A},2}}].\\end{equation*}\n</span></span></disp-formula></p></div></p></div></p></div><div class=\"section_2\" id=\"sec6a3\"><h4>3) User Balance</h4><p>To win the user balance game, an adversarial provider must recover a valid signing ephemeral key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$sk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> and use it to sign a bitcoin transaction to itself. However, this is prevented by the unforgeability of the signature scheme. Neither can the provider post a transaction containing a smaller reward as the user would abort and not post the transaction that releases the encryption key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>. Finally, the one-wayness of the hash function and the zero-knowledge property of the <i>zkSNARK</i> guarantee that a malicious provider cannot obtain <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> from the received <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$H(K)$\n</tex-math></inline-formula> or the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>. This intuition is captured by the following theorem.</p><p><div class=\"section_2\" id=\"\"><h4>Theorem 4 (User Balance):</h4><p>If <a ref-type=\"theorem\" anchor=\"theorem1\" class=\"fulltext-link\">Theorem 1</a> is true, the signature scheme is secure, the hash function is one-way and the <i>zkSNARK</i> is zero-knowledge, our rewarding scheme satisfies <a ref-type=\"definition\" anchor=\"definition5\" class=\"fulltext-link\">Definition 5</a>.</p><p><div class=\"section_2\" id=\"\"><h4>Proof:</h4><p>The proof is similar to that of <a ref-type=\"theorem\" anchor=\"theorem3\" class=\"fulltext-link\">Theorem 3</a> and is omitted. </p></div></p></div></p></div><div class=\"section_2\" id=\"sec6a4\"><h4>4) Privacy</h4><p>If there was an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> that could distinguish the ephemeral keys of the two users <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{2}$\n</tex-math></inline-formula> this would imply an adversary that could break the blindness property of the underlying signature scheme. The second adversary would simply use <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula>\u2019s guesses for the ephemeral keys of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{2}$\n</tex-math></inline-formula> to answer the challenge of the corresponding blind signature game. This is formalized below.</p><p><div class=\"section_2\" id=\"\"><h4>Theorem 5(Privacy):</h4><p>If the blind signature scheme is secure, our rewarding scheme is user-private as per the <a ref-type=\"definition\" anchor=\"definition6\" class=\"fulltext-link\">Definition 6</a>.</p><p><div class=\"section_2\" id=\"\"><h4>Proof:</h4><p>Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> be an adversary that distinguishes between <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{1}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{2}$\n</tex-math></inline-formula> in experiment <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathsf {Exp^{Priv}_{\\mathcal A}}$\n</tex-math></inline-formula> with probability better than random guessing. If this is possible, an adversary <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> exists that attacks the security of the blind signature scheme used during registration.</p><p><inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> simulates <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> queries and waits until <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> produces the ephemeral keys <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal {U}_{i}}^{e}$\n</tex-math></inline-formula> for <inline-formula id=\"\"><tex-math notation=\"LaTeX\">${\\mathcal{ U}}_{i}$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$i=0,1$\n</tex-math></inline-formula>. Then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> computes the corresponding hash values <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{i}=H(pk_{\\mathcal {U}_{i}}^{e})$\n</tex-math></inline-formula> and submits them to its challenger in the signature indistinguishability game. Let <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Sig}_{\\mathcal{ P}}(h_{b})$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\textsf {Sig}_{\\mathcal{ P}}(h_{1-b})$\n</tex-math></inline-formula> be the signatures created by the signature oracle and returned to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula>, for some random bit <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b$\n</tex-math></inline-formula>. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> forwards these to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> to continue its game in the privacy experiment. When <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> outputs its guess <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b'$\n</tex-math></inline-formula>, <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> outputs the same guess. If <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> guessed correctly (i.e. <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$b'=b$\n</tex-math></inline-formula>) then <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {B}$\n</tex-math></inline-formula> can tell between the two blind signatures. Thus the advantage of <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {A}$\n</tex-math></inline-formula> in the privacy experiment is bounded by the advantage of an adversary in breaking the security of the blind signature scheme. </p></div></p></div></p></div></div></div>\n<div class=\"section\" id=\"sec7\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION VII.</div><h2>Implementation</h2></div><p>In this section, we look at various implementation details of the protocol. We consider both a Bitcoin-based approach as well as smart contracts-based one.</p><div class=\"section_2\" id=\"sec7a\"><h3>A. zkSNARKs Generation</h3><p>We start by reporting the time and memory required to run the algorithms of the <i>zkSNARK</i> proof system (recall <a ref-type=\"sec\" anchor=\"sec4\" class=\"fulltext-link\">Sections IV</a> and <a ref-type=\"sec\" anchor=\"sec5e\" class=\"fulltext-link\">V-E</a>). The proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> attests to the correctness of the encryption key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula>, the validity of the application of the rewarding function <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {R}$\n</tex-math></inline-formula> on the data as well as the application of the user\u2019s signing key in the construction of the redeeming tag.</p><p>The xJsnark <a ref-type=\"bibr\" anchor=\"ref36\" id=\"context_ref_36_7a\">[36]</a> framework was used to write our <i>zkSNARK</i> verification program. The resulting arithmetic circuit was then ported into libsnark <a ref-type=\"bibr\" anchor=\"ref37\" id=\"context_ref_37_7a\">[37]</a>. We set the rewarding function on data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m$\n</tex-math></inline-formula> equal to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$R(m) = \\max {(u_{min},\\min {(a_{1}m+a_{0},u_{max})})}$\n</tex-math></inline-formula>, for some constants <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$u_{min},u_{max},a_{0},a_{1}$\n</tex-math></inline-formula>. Although the reward can be a fixed amount for user submissions, a more complicated expression was used to stress test the <i>zkSNARK</i> generator. The user data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$m$\n</tex-math></inline-formula> was set to 1KB as if responding to a task that asked for 5 min temperature readings for a duration of more than a day.</p><p>Our findings show that the time to generate the proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula> is 25.3 seconds on the user side, however the time to verify it is only 4.8ms. This is important from the provider\u2019s point of view as the work per user is negligible. Thus, a provider can handle a large number of users with minimal overhead.</p></div><div class=\"section_2\" id=\"sec7b\"><h3>B. Communication Overhead</h3><p>The fixed size of the proof (288 bytes) ensures that the communication overhead is dominated by the encrypted data <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> which had to be sent anyway (in either encrypted or plain form). This is analyzed in more detail below. Consider the message send from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> (recall <a ref-type=\"fig\" anchor=\"fig2\" class=\"fulltext-link\">Figure 2</a>): <disp-formula id=\"\" class=\"display-formula\"><tex-math notation=\"LaTeX\">\\begin{equation*} \\langle Enc_{\\mathcal{ P}}(C), h_{K}, val, \\tau, \\pi, pk_{\\mathcal{ U}}^{e}, Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e}), \\sigma _{e} \\rangle.\\end{equation*}\n</tex-math><span class=\"formula\"><span class=\"link\">View Source</span><img aria-describedby=\"qtip-0\" style=\"display:inline;\" title=\"Right-click on figure or equation for MathML and additional features.\" data-hasqtip=\"0\" class=\"qtooltip moreInfo\" alt=\"Right-click on figure for MathML and additional features.\" src=\"/assets/img/icon.support.gif\" border=\"0\" height=\"20\" width=\"24\"/><span class=\"tex tex2jax_ignore\" style=\"display:none;\">\\begin{equation*} \\langle Enc_{\\mathcal{ P}}(C), h_{K}, val, \\tau, \\pi, pk_{\\mathcal{ U}}^{e}, Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e}), \\sigma _{e} \\rangle.\\end{equation*}\n</span></span></disp-formula></p><p>Both <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$h_{K}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\tau $\n</tex-math></inline-formula> are hash outputs so they can be taken to be equal to 160 bits or 20 bytes each. The value <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$val$\n</tex-math></inline-formula> of the data can fit in a 64-bit word, so this contributes another 8 bytes to the total. Bitcoin is based on the use of elliptic curve cryptography (secp256k1 curve) and in particular the ECDSA algorithm for signing. Thus the size of the public key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$pk_{\\mathcal{ U}}^{e}$\n</tex-math></inline-formula> is 33 bytes, while the size of the resulting signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\sigma _{e}$\n</tex-math></inline-formula> is bounded by 73 bytes. Using RSA as our blind signature scheme, the signature <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Sig_{\\mathcal{ P}}(pk_{\\mathcal{ U}}^{e})$\n</tex-math></inline-formula> of the provider contributes another 128 bytes (however elliptic curve variants or less expensive blind schemes can be used instead). Thus, ignoring the size of the encrypted data, the user must send 570 bytes, which also includes the size of the <i>zkSNARK</i> proof <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\pi $\n</tex-math></inline-formula>.</p><p>The remaining overhead comes from <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$Enc_{\\mathcal{ P}}(C)$\n</tex-math></inline-formula>. However, instead of encrypting <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$C$\n</tex-math></inline-formula> with the provider\u2019s public key one can encrypt a symmetric key and use this to encrypt the remaining data. Thus, public key encryption can be reduced to encrypting just a single key instead of the remaining data. As the data has to be sent anyway, the encryption overhead is minimal.</p></div><div class=\"section_2\" id=\"sec7c\"><h3>C. Bitcoin Implementation</h3><p>We now turn our attention to the actual bitcoin transactions. The protocol transactions (<inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula>) were built and tested on Bitcoin Core version 0.21.1 using the Segregated Witness (SegWit) transaction format. In particular, we used the bech32 (native SegWit) address type in order to minimize the size of the transactions posted in the blockchain.</p><p>The size of the complete transaction is 300 bytes and the size of the witness data is 220 bytes which includes the size of the key and the signature (for more details see <a ref-type=\"bibr\" anchor=\"ref38\" id=\"context_ref_38_7c\">[38]</a>). This allows us to compute the <i>virtual</i> size of the transaction which is given by the expression <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$vsize = \\lceil (btxs * 3 + ttxs)/4\\rceil $\n</tex-math></inline-formula>, where <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$btxs$\n</tex-math></inline-formula> is the base transaction size (which does not include the witness data), and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$ttxs$\n</tex-math></inline-formula> is the complete transaction size. Hence the virtual size of each transaction is small and amounts to just 135 bytes.</p><p><i>Cost estimation:</i> Adding a transaction to the bitcoin blockchain requires a transaction fee which is calculated in Satoshis/byte. The fee depends on the size of the transaction but also the time it takes to be mined. For example, a delay <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> means that it takes <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$d$\n</tex-math></inline-formula> blocks to mine the transaction. Hence bigger transaction delays lead to less Satoshis payed per byte and hence smaller overall cost. <a ref-type=\"table\" anchor=\"table3\" class=\"fulltext-link\">Table III</a> demonstrates the cost of the Bitcoin implementation based on the Satoshis/byte values according to <a ref-type=\"bibr\" anchor=\"ref39\" id=\"context_ref_39_7c\">[39]</a>. Funding and redeeming correspond to transactions <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ P\\rightarrow U}}$\n</tex-math></inline-formula> and <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$T_{\\mathcal{ U\\rightarrow P}}$\n</tex-math></inline-formula>, respectively (<a ref-type=\"sec\" anchor=\"sec5f\" class=\"fulltext-link\">Section V-F</a>).<div class=\"figure figure-full table\" id=\"table3\"><div class=\"figcaption\"><b class=\"title\">TABLE 3 </b>\nCost of Bitcoin Transactions Based for a Delay of \n$d$\n Blocks</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t3-3227633-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t3-3227633-small.gif\" alt=\"Table 3- &#10;Cost of Bitcoin Transactions Based for a Delay of &#10;$d$&#10; Blocks\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div><div class=\"section_2\" id=\"sec7d\"><h3>D. Smart Contracts Implementation</h3><p>The smart contract was implemented in solidity 0.7.6 <a ref-type=\"bibr\" anchor=\"ref40\" id=\"context_ref_40_7d\">[40]</a> and tested on the Ethereum Ropsten test network. The smart contract consists of two main functions.\n<ol><li><p><i>Deploy &amp; Fund</i>: The smart contract is first deployed and then funded by the provider <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula> with a deposit equal to the value of the data. This basically expresses <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {P}$\n</tex-math></inline-formula>\u2019s willingness to pay for the key received by the user <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula>. The function changes the smart contract\u2019s state and allows <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> to reveal the key.</p></li><li><p><i>Redeem</i>: This is called by <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$\\mathcal {U}$\n</tex-math></inline-formula> in order to reveal the key to the smart contract. If the key matches the hash value stored in the contract, the deposit is transferred to the user.</p></li></ol></p><p><i>Cost estimation:</i> <a ref-type=\"table\" anchor=\"table4\" class=\"fulltext-link\">Table 4</a> shows the gas cost of deploying the smart contract and executing the main functions for a key <inline-formula id=\"\"><tex-math notation=\"LaTeX\">$K$\n</tex-math></inline-formula> of size 128 bits. As it can be seen, the cost of deploying the smart contract is the most expensive one.<div class=\"figure figure-full table\" id=\"table4\"><div class=\"figcaption\"><b class=\"title\">TABLE 4 </b>\nSmart Contract Transaction Gas</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t4-3227633-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t4-3227633-small.gif\" alt=\"Table 4- &#10;Smart Contract Transaction Gas\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p><p>Similarly to Bitcoin blockchain, fees determine the time it takes for the transaction to be added to the Ethereum blockchain. In this case, however, fees of Ethereum transactions are calculated in Gwei/gas; more Gwei per gas means a faster processing time. <a ref-type=\"table\" anchor=\"table5\" class=\"fulltext-link\">Table V</a> demonstrates the transaction costs based on the Gwei/gas values according to <a ref-type=\"bibr\" anchor=\"ref41\" id=\"context_ref_41_7d\">[41]</a>.<div class=\"figure figure-full table\" id=\"table5\"><div class=\"figcaption\"><b class=\"title\">TABLE 5 </b>\nCost of Smart Contract Based on the Time Transactions are Added to the Ethereum Blockchain</div><div class=\"img-wrap\"><a href=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t5-3227633-large.gif\"><img src=\"/mediastore_new/IEEE/content/media/6287639/9668973/9976049/dimit.t5-3227633-small.gif\" alt=\"Table 5- &#10;Cost of Smart Contract Based on the Time Transactions are Added to the Ethereum Blockchain\"/><div class=\"zoom\" title=\"View Larger Image\"/></a></div></div></p></div><div class=\"section_2\" id=\"sec7e\"><h3>E. Comparison</h3><p>Comparing <a ref-type=\"table\" anchor=\"table3\" class=\"fulltext-link\">Tables 3</a> and <a ref-type=\"table\" anchor=\"table5\" class=\"fulltext-link\">5</a>, we see that the Ethereum implementation is at least two orders of magnitude more expensive than the corresponding Bitcoin implementation. This is attributed to the simpler Bitcoin <i>Pay-to-Script-Hash</i> transactions used to pay for the release of the secret key. On the other hand, even a simple smart contract as the one used in this work is extremely costly. This also suggests the superiority of Bitcoin implementation compared to <a ref-type=\"bibr\" anchor=\"ref11\" id=\"context_ref_11_7e\">[11]</a>, <a ref-type=\"bibr\" anchor=\"ref12\" id=\"context_ref_12_7e\">[12]</a>, <a ref-type=\"bibr\" anchor=\"ref13\" id=\"context_ref_13_7e\">[13]</a>, and <a ref-type=\"bibr\" anchor=\"ref14\" id=\"context_ref_14_7e\">[14]</a> that use the smart contract to exchange data as well. Hence the cost of these solutions depends on the size of the data transmitted and does not remain fixed as in our case.</p><p>Finally, <a ref-type=\"table\" anchor=\"table1\" class=\"fulltext-link\">Table 1</a> shows a comparison of our protocols with other existing crowd-sensing protocols regarding the confidentiality and strong fairness guarantees. This analysis (in addition to the cost advantage) shows the practicality of our approach in the scenarios envisioned by crowd-sensing applications.</p></div></div>\n<div class=\"section\" id=\"sec8\"><div class=\"header article-hdr\"><div class=\"kicker\">\n\t\t                        SECTION VIII.</div><h2>Conclusion</h2></div><p>In this work, we developed a privacy-preserving rewarding framework that can be used to incentivize and increase user participation in crowd-sensing applications. With the help of our framework users can submit data collected with their smart devices and obtain <i>rewards</i> in the form of bitcoin payments. Our protocol guarantees the anonymity of submissions without sacrificing accountability. Indeed one of the key requirements in our work is to prevent <i>double-redeeming</i> attacks in which a user may attempt to obtain multiple rewards for the same data. Our proposal prevents this malicious behavior without giving up anonymity of transactions. Thus user submissions cannot be distinguished and rewards remain unlinkable. More importantly, our protocol guarantees the <i>fairness</i> of the exchange as neither the user nor the provider can cheat each other. Finally, our protocol is highly efficient as most of the steps take place <i>offchain</i> and only the actual payment exchange uses the blockchain network. We have implemented our protocol in both Bitcoin and Ethereum blockchains. Since we only rely on simple <i>Pay-to-Script-Hash</i> transactions, as opposed to complex smart contracts used in prior works, the viability of our approach is ensured.</p></div>\n<h3>ACKNOWLEDGMENT</h3><p>The authors would like to thank the reviewers for their comments that helped improve the paper considerably, and also would like to thank Karim Elmaghraby for his implementation of the Bitcoin and Ethereum scripts.</p></div></div></response>\n"
}